[{"title":"《C陷阱与缺陷》笔记","url":"/[笔记]C陷阱与缺陷/","content":"# 声明变量与类型转换\n\n## 类型转换\n\n假如现在要声明一个 `float` 变量：\n\n```c\nfloat f;\n```\n\n那么当我们进行类型转换时，只要把_；_ 和 _变量名_ 去掉，并在类型外面加上_一对括号_ 即可：\n\n```c\n(float) a;\n```\n\n利用类型转换的原则，我们可以发现：\n\n```c\nfloat (*pf)();\n```\n\n声明了一个函数指针，由此，要把某个变量转换为函数指针：\n\n```c\n(float (*)())\n```\n\n现在你可以理解下列语句的意思了：\n\n```c\n(* (void (*)()) 0))();\n```\n\n我们也可以使用 `typedef` 来让这个语句看起来更漂亮一些：\n\n```c\ntypedef void (*funcptr)(); \n// 更准确的意思可以表达为： typedef void (*)() funcptr;\n// 但这不是正确的语法\n\n(*(funcptr) 0))();\n```\n\n但是，为什么不能使用：\n\n```c\ntypedef void (*)() funcptr;\n```\n\n呢？\n\n我猜原因是这里C语言应用的逻辑是 _声明_ 而不是 _类型转换_ . \n\n（尽管 `typedef void (*)() funcptr;` 这种写法更符合逻辑，也更易懂）\n\n对于一个函数，可以利用类似的思想来理解：\n\n```c\nfloat fun(...);\n```\n\n表示声明 `fun(...)` 是一个 `float` 类型的变量，即它的返回值是 `float` 类型的变量。\n\n而之所以在上面 `typedef` 的例子中要这么定义，同样也是和声明有关：\n\n```c\n// 下面是一个声明返回值为 void 的函数指针的声明方法\nvoid (*fun)(int);\n\n// 把 funcptr 作为 void (*)() 的别名时，需要使用声明的语法\ntypedef void (*funcptr)();\n// 同理：\ntypedef int uint32;\n```\n\n同样的，声明一个返回函数指针的函数时（以`signal()` 函数为例）：\n\n```c\n// 下面是一个声明返回值为 void 的函数指针的声明方法\nvoid (*fun)(int);\n\n// 由声明函数指针的方法知道我们要把signal这个函数的返回值声明为一个“返回值为 void 的函数指针”\n// 的方法：\n// 去掉变量名: void (*)(int)\n// signal的参数为一个int和一个函数指针，将 signal(int, void (*)(int)) 放进去\n\n// 应用规则，一个返回值为函数指针的函数应该声明为：\nvoid (*(signal(int, void (*)int)))(int);\n```\n\n\n\n# 语法陷阱\n\n## 指针和数组\n\n- C语言只有**一维数组**，且数组的大小在编译时必须为一个恒常数。而数组的成员可以为任意类型，包括数组，这使得构建多维数组成为可能。\n- 对数组只有两种操作：确定它的大小和获取第0个元素的指针。**所有**的数组操作都是通过指针完成的。所有的下标操作都相当于指针操作。\n\n- 除了作为关键字sizeof的操作数时，数组的变量名代表整个数组（因此返回的参数为数组的实际大小），其他时候都被转换为代表数组的首元素指针。ANSI C不允许 `p = &a` 这种写法，但在某些情况下 `&a` 代表“整个数组的地址”\n\n- 字符串：\n\n```c\n// 假定我们有字符串s和t\nchar *r;\nstrcpy(r, s);\nstrcat(r, t);\n```\n\n上面这种写法是错误的，因为不知道`r`指向何处，我们需要使用`malloc`或声明为`char r[100]`给`r`分配空间。\n\n- 数组作为参数传递时，实际上是传递了一个首元素的指针。\n- 逗号运算符：\n\n```c\n// 在函数参数中，逗号不是运算符\nfun(a, b);\n// 而当逗号作运算符的时候，逗号左边的值先运算，随后被丢弃\ng((a,b));\n```\n\n\n\n"},{"title":"DSP知识整理","url":"/dsp知识整理/","content":"\n\n推荐参考书籍：《手把手教你学DSP—基于TMS320X281x》（第3版） *顾卫钢*\n\n# 一、DSP概述\n\n### 硬件：\n\n- 高速控制和信号处理\n- 采用流水线操作\n- 采用哈佛结构，数据存储区和程序存储区分离，数据总线和程序总线也是分开的\n- 大多配有硬件乘法器和加法器，同一时钟周期内可以完成累加和累乘\n- 零开销循环\n\n### 软件：\n- 显示MAC（乘加器）指令\n- 精简指令集\n- 专门的寻址方式\n\n### DSP分类\n\n按数据格式分：\n- 定点\n- 浮点\n\n按用途分：\n- 通用\n- 专用\n\n### DSP的应用\n1. 数字电机控制\n2. 数字电源供应\n3. 高级传感器\n4. ...\n\n\n# 二、TMS320F2812\n\n### C2000系列DSP\n1. Piccolo系列\n   - F2802x, F2803x/5x, F2806x\n2. Delfino系列\n   - F2833x/23x, C2834x, F2837xS, F2837xD \n\n### CPU\n\n- 32位定点CPU\n- 150MHz\n- 当频率为135MHz时，核心电压1.8V；当频率为150MHz时，核心电压为1.9V；输出IO口电压为3.3V\n\n### 内存\n\n- 18kW RAM\n- 128kW Flash\n\n### 总线\n\n- 3条地址总线\n  - PAB：程序地址总线，**22位**\n  - DRAB：数据读地址总线，32位\n  - DWAB：数据写地址总线，32位\n- 3条数据总线\n  - DRDB：数据读数据总线，32位\n  - DWDB：数据写数据总线，32位\n  - PRDB：程序读数据总线，32位\n\n### 外设功能模块\n- 控制类\n  - IO\n  - 定时器\n  - PWM\n\n- 测量类\n  - 数字：捕获、正交编码\n  - 模拟：ADC\n\n- 通讯类\n  - UART\n  - eCAN\n  - SPI\n  - McBsp\n\n### 其他\n\n外设中断扩展模块（PIE）\n- 支持45个外部中断\n\n片上存储器\n- 128kW Flash，受到CSM（Code Security Module）保护\n- 1kW的OTP型存储器（一次性可编程ROM），受到CSM的保护；\n- 18kW的SARAM\n  - L0和L1：两个4kW的SARAM, 受到CSM的保护\n  - H0: 8kW\n  - M0和M1：两个1kW的SARAM\n- 56个可编程IO口\n- 时钟和系统控制\n- 3个32位CPU定时器\n- 马达控制外设\n  - 两个事件管理器\n- 12位ADC，16通道\n\n### 寻址方式\n\n1. 直接寻址\n2. 间接寻址\n3. 寄存器寻址\n4. 堆栈寻址\n5. 数据/地址/IO空间立即寻址方式\n6. 程序空间间接寻址方式\n\n### C28x流水线\n- 八级流水线，五个阶段\n- 取指令，译码，读取数据，执行，写回\n\n# 三、时钟和系统控制\n![OSC&PLL](../img/DSP/OSC&PLL.png)\n时钟CLKIN的来源有两种，一种是外部晶振提供，另一种是外部时钟输入。可以通过引脚<span style=\"text-decoration: overline\">XF_PLLDIS</span>来控制选择。\n\n- 晶振：20MHz ~ 35MHz\n- 外部时钟：有PLL: 5 ~ 100MHz；无PLL: 4 ~ 150MHz\n\n在使用对应的外设之前，需要使能它们的时钟。与外设时钟使能相关的寄存器是<u>外设时钟使能寄存器PCLKCR</u>。\n\nSYSCLK经过分频可以得到低速外设时钟LSPCLK和高速外设时钟HSPCLK，它们互相独立，分别给高速外设和低速外设供应时钟信号。\n\n<img src=\"..\\img\\DSP\\HSPCLK_LSPCLK.png\" style=\"zoom:75%;\" />\n\n\n\n### 看门狗电路\n\n当八位的<u>看门狗加法计数器WDCNTR</u>达到最大值时，看门狗模块输出一个512个周期的脉冲，使系统复位。\n\n如果不想使用看门狗，可以直接禁止看门狗。\n\n如果启用了看门狗，当程序正常运行时，我们需要定期向WDCNTR依次顺序写入0x55和0xAA来清零，实现“喂狗”操作。\n\n逻辑校验位是看门狗的另一个安全机制，访问<u>看门狗控制器WDCR</u>的写操作中，相应的校验位必须为“101”，否则会立即拒绝访问并引发系统复位。\n\n### 低功耗模式\n\n- 空闲模式：CPU进入低功耗模式，部分外设不使用时时钟选择性关闭，会自动降低频率来降低功耗，任何使能的外设中断都可以唤醒此模式。\n- 暂停模式：片上所有设备停止工作\n- 备用模式：关闭CPU和外设时钟，OSC和PLL正常工作\n\n# 四、CPU定时器\n\nx2812内部有3个32位的CPU定时器，其中只有Timer0可供用户使用，Timer1和Timer2都被系统保留。\n\n欲使用CPU定时器来计时，需要设置两个寄存器：\n\n- 周期寄存器 PRDH:PRD\n- 分频器寄存器 TDDRH:TDDR\n\n计数器的周期有以下两个公式：\n\n${TIMCLK = \\frac{TDDRH:TDDR + 1 }{SYSCLK} * 10^{-6}}$\n\n${Period = (PRDH:PRD + 1) * TIMCLK}$\n\n# 五、编程\n\n## 程序文件\n\n- 源程序文件：C，汇编文件\n- 头文件：.h文件\n- 命令文件(cmd)：对程序和数据存储空间进行分配\n- 运行支持库\n\n## 命令文件\n\n伪指令：\n\n- MEMORY：用来指示存储空间\n  - PAGE0：程序空间\n  - PAGE1：数据空间\n- SECTION：用来分配到储存空间\n  - 段：\n    - .cinit：存放用来对全局 和静态变量初始化的函数\n    - .text：存放编译C语言时产生的汇编代码\n    - .econst：包含字符串常量、全局变量和静态变量的初始化和说明\n    - .ebss：使用大寄存器模式时为全局变量和静态变量所预留的空间\n    - .stack：为系统堆栈保留的空间，主要用于函数传递变量和为局部变量分配空间。\n\n# 六、GPIO\n\n总共56个可编程复用IO口，分为ABDEFG六组。复位默认为输入口。可提供4mA输入电流。\n\n寄存器：\n\n- GPxMUX\n  - 写0，设置为数字IO口\n  - 写1，功能复用\n- GPxDIR\n  - 写0，输入\n  - 写1，输出\n- GPxDAT\n  - 写0，拉低输出\n  - 写1，拉高输出\n  - 存在一定的问题，建议使用下面三个寄存器来操作\n- GPxSet：只能写1\n- GPxClear：只能写1\n- GPxTOGGLE：只能写1\n\n```c\n// 置位输出\nGpioDataReg.GPASET.bit.GPIOA0 = 1;\n// 读取输入\nif(GpioDataReg.GPASET.bit.GPIOA2 == 0) {\n    ...\n}\n```\n\n \n\n# 七、中断\n\n中断的类型：\n\n- 触发形式\n  - 软件中断\n  - 硬件中断\n    - 内部中断\n    - 外部中断\n- 能否屏蔽\n  - 可屏蔽中断\n  - 不可屏蔽中断\n\n## 中断优先级\n\n在不同组内INT1最大，在PIE同组内，INTx.1最大。\n\n## CPU级中断\n\nCPU中的中断由IER和INTM控制。IER控制每个可屏蔽中断，INTM相当于总闸。\n\n## PIE中断\n\n外设中断扩展模块（PIE），对各种中断请求源进行处理。\n\nPIE一共支持96个中断，这些中断被分为了12个组，每组由8个中断。每个组都被反馈到 <span style=\"text-decoration:overline\" >INT1</span> ~ <span style=\"text-decoration:overline\" >INT12</span> 这12条中断线上的某一条。\n\n## PIE中断向量表\n\nDSP中各个中断服务子程序的地址储存在一片连续的RAM（大小为256x16）内，这就是中断向量表。\n\n## 2812的三级中断系统\n\n三级系统都要允许，某中断才会发生。\n\n- 外设级\n\n  - 当外设中断标志位被置1，且该外设中断为使能状态，此时外设向PIE发出中断请求；\n  - <span style=\"color:red; font-weight:bold\">外设中断标志位置位后必须<u>手动清除</u>！！！</span>\n\n  ```c\n  CpuTimer0Reg.TCR.bit.TIF = 1;\t// 写1来手动清除外设寄存器中的标志位\n  ```\n\n  \n\n- PIE级\n\n  - 除了中断标志寄存器和中断使能寄存器，还有中断应答寄存器。\n  - 同组内的中断在响应时，如果发生了其他同组中断，若中断应答寄存器没有被手动清零，后发生的中断不会被响应。<span style=\"color:red; font-weight:bold\">中断应答寄存器需要手动清除</span>。PIE级中断的标志位不需要手动清除。\n\n  ```c\n  PieCtrl.PIEACK.bit.ACK1 = 1;\n  ```\n\n  \n\n- CPU级\n\n  - 当外设中断请求发送到CPU时，CPU的中断标志寄存器IFR对应位置位。这时，CPU检查IER对应的位是否置位，以及INTM是否<span style=\"color:red; font-weight:bold\">为0</span>。\n\n<img src=\"..\\img\\DSP\\INTERRUPTION.png\" style=\"zoom:75%;\" />\n\n## 中断函数的编写\n\n1. 使能某个中断：\n\n```c\nvoid InitXXX(void) {\n    ...\n    CpuTimer0Regs.TCR.bit.TIE = 1;\t// 使能定时器0的周期中断\n    ...\n}\n```\n\n2. 在主函数里：\n\n```c\nvoid main(void) {\n    InitXXX();\n    DINT;\n    IER = 0x0000;\n    IFR = 0x0000;\n    InitPieCtrl();\n    InitPieVectTable():\n    // 使能PIE的中断\n    PieCtrl.PIEIER1.bit.INTx7 = 1;\n    IER |= M_INT1;\n    EINT;\n}\n```\n\n3. 在DSP28_DefaultIsr.c文件里配置中断函数\n\n```c\ninterrupt void TINT0_ISR(void) {\n    ...\n    CpuTimer0Regs.TCR.bit.TIF = 1;\n    PieCtrl.PIEACK.bit.ACK1 = 1;\n    EINT;\n}\n```\n\n\n\n# 八、EV模块（事件管理器）\n\n两个事件管理器Eva和Evb，两个事件管理器的功能是一模一样的。\n\n下面**针对Eva**来介绍事件管理器的结构：\n\n- 2个16位通用定时器，每个定时器可以产生1路独立的PWM波。\n- 3个比较单元\n- 3个捕获单元\n- 1个正交编码脉冲电路\n\nEvb和Eva类似。\n\n## 通用定时器\n\n### 功能\n\n1. 计时\n2. 使用定时器的比较功能产生PWM波\n3. 给Ev的其他模块提供时钟\n\n### 寄存器\n\n**GPTimer1**的寄存器们be like:\n\n- 16位周期寄存器T1PR（带有阴影寄存器）\n- 16位比较寄存器T1CMPR（带有阴影寄存器）\n- 定时器计数器寄存器T1CNT\n- 16位控制寄存器T1CON\n- 16位通用定时器控制寄存器GPTCONA\n\n### 通用定时器的时钟\n\nSYSCLK  --> HSPCLK --> TCLK\n\n$TCLK = \\frac{HSPCLK}{2^{p}}$\n\n其中，p = 1 ~ 128\n\n### 计数方式\n\nGPTimer1通过T1CON的TMODE1和TMODE0控制计数方式。\n\n| TMODE1 | TMODE0 |       描述        |\n| :----: | :----: | :---------------: |\n|   0    |   0    |   停止/保持模式   |\n|   0    |   1    | 连续增/减计数模式 |\n|   1    |   0    |  连续增计数模式   |\n|   1    |   1    | 定向增/减计数模式 |\n\n对定向增/减计数模式的说明：当为定向增/减计数模式时，计时器工作在递增还是递减模式取决于引脚TDIRA的电平，高电平递增，低电平递减。\n\n### 中断事件\n\n- 上溢中断\n- 下溢中断\n- 比较中断\n- 周期中断\n\n### PWM波\n\n要产生PWM波：\n\n- 使能定时器的T1CON的TECMPR位为1（比较使能）\n- GPTCONA的TCMPOE位为1（输出使能）\n\n此时，T1PWM_T1CMP引脚输出PWM波。当T1CNT与T1CMPR的值相匹配时，引脚T1PWM_T1CMP电平就会发生跳变。\n\n产生的PWM波有两种：\n\n- 不对称（连续增计数模式）\n- 对称（连续增\\减计数模式）\n\n可以配置GPTCONA的T1PIN[1:0]位控制输出的极性：\n\n| 位1  | 位0  |    描述    |\n| :--: | :--: | :--------: |\n|  0   |  0   |   强制低   |\n|  0   |  1   | 低电平有效 |\n|  1   |  0   | 高电平有效 |\n|  1   |  1   |   强制高   |\n\n低电平有效就是T1CNT的值比T1CMPR小的时候输出高电平，其他以此类推。\n\n定时器的周期为：\n\n非对称模式：\n\n$T = (T1PR + 1) * TCLK$\n\n对称模式：\n\n$T = (2 * T1PR) *TCLK$\n\n## 全比较单元\n\nEva、Evb各有3个全比较单元（加起来总共6个），每个比较单元都可以输出2路互补的PWM波，所以Eva或者Evb可以都有能力驱动一个三相全桥电路。（当然你也可以设置输出的两路PWM完全相同）\n\n### 寄存器\n\n按Eva和Evb来分：\n\n- 16位比较寄存器CMPR1~3， CMPR4~6，共6个（都有阴影寄存器）\n- 16位比较控制寄存器COMCONA和COMCONB，共2个\n- 16位行为控制寄存器ACTRA和ACTRB（都有阴影寄存器）\n\n以Eva为例，输出的PWM极性可以通过ACTRA的位CMP1和CMP2控制。使能COMCONA的CENABLE和FCMPOE位时即可产生两路互补的PWM波。\n\n每个比较寄存器都有两个对应的PWM输出引脚：比如CMPR1对应PWM1和PWM2\n\n输出的PWM波类型和GPTimer是一样的。只是把T1CMPR改成CMPRx即可。\n\n带有死区控制的PWM不考，不写了。\n\n## 捕获单元\n\n捕获单元能够捕获外部输入引脚CAPx_QEPx的电平变化。当捕获到指定的电平变化时，捕获单元就记录下定时器的时间。利用两次捕获的时间差，捕获单元就可以测量出信号的脉宽。\n\n2812的Eva和Evb各有三个捕获单元CAP1 ~ 3和CAP4 ~ 6。每个捕获单元都有一个捕获输入\n\n引脚，通过配置相关寄存器可以捕获输入波形的上升沿、下降沿或者同时捕获上升沿和下降沿。当引脚检测到指定的变化时，所选用的定时器的值将被捕获并锁存到对应的2级FIFO堆栈中。注意，从引脚发生变化到锁存定时器的值需要至少2个时钟周期，所以**输入信号至少要保持2个时钟周期**。\n\n### 寄存器\n\n- 捕获控制寄存器CAPCONA, CAPCONB\n- 捕获FIFO状态寄存器CAPFIFOA， CAPFIFOB\n- 两级深度的FIFO堆栈CAPFIFOx, CAPFBOTx (x = 1 ~ 6)\n\n以Eva的CAP1为例，在堆栈为空的时候，捕获状态寄存器CAPFIFOA的CAP1FIFO状态位为00，发生一次捕获后，定时器计数寄存器T1CNT的值被存入栈顶，CAP1FIFO状态位为01，第二次捕获后，数据存入栈底，堆栈全满，CAP1FIFO状态位变为10；第三次捕获后，栈顶的数据出栈，第二次捕获的来到栈顶，第三次捕获的来到栈底。如果没有读取第一次捕获的值（第一次捕获的值丢失），则CAP1FIFO状态位变为11；否则如果在第三次捕获前已经读取了第一次捕获的值，则CAP1FIFO状态位仍为10.\n\n\n\n### 中断\n\n以Eva为例，捕获单元1具有捕获中断CAP1INT，捕获单元2有CAP2INT，捕获单元3有CAP3INT...\n\n中断发生的条件：\n\n1. 捕获单元捕获到信号发生指定的变化\n2. 此时CAPxFIFO不为0（堆栈非空）\n\n则此时中断标志位被置位。\n\n和中断相关的寄存器：\n\n- 中断标志寄存器EVAIFRC，EVBIFRC\n- 中断屏蔽寄存器EVAIMRC和EVBIMRC（用来使能中断的）\n\n## 正交编码电路\n\n每个事件管理器都有一个正交编码电路（QEP电路），光电码盘输出的两路正交编码信号从两个输入引脚输入到QEP电路，在通过两个QEP电路的译码器对正交编码信号进行译码，最后就能得到电机转子的转速、旋转方向、旋转位置等信息。\n\n\n\n```c\n/*\n * 自己写的事件管理器Init函数\n * 配置了全比较单元输出PWM波和捕获单元捕获上升下降沿\n */\nvoid InitEv(void)\n{\n\t/*\n\t * 配置GP Timer2\n\t */\n\tEvaRegs.T2CON.bit.TENABLE = 0; \t// 暂时禁止t2计数\n\tEvaRegs.T2CON.bit.TPS = 0;\t\t\t// 输入计数时钟为HSPCLK = 75MHz\n\tEvaRegs.T2CON.bit.TMODE = 2; \t\t// GP Timer2连续增计数模式\n\tEvaRegs.T2CON.bit.TCLKS10 = 0; \t// 选择内部时钟T2CLK\n\n\tEvaRegs.T2CNT = 0x0000;\t// Clear the counter for GP timer 2\n\tEvaRegs.T2PR = 0x3A97;\t\t// 频率为5kHz，PR = 14999\n\n\t/*\n\t * GP Timer2周期中断配置\n\t*/\n\tEvaRegs.EVAIMRB.bit.T2PINT = 1;\t\t// 使能GP Timer2周期中断\n\tEvaRegs.EVAIFRB.bit.T2PINT = 1;\t\t\t// 复位GP Timer2周期中断标志位\n\n\n\t/*\n\t * 配置GP Timer1\n\t */\n\tEvaRegs.T1CON.bit.TENABLE = 0; \t// 暂时禁止t1计数\n\tEvaRegs.T1CON.bit.TPS = 0;\t\t\t// 输入计数时钟为HSPCLK = 75MHz\n\tEvaRegs.T1CON.bit.TMODE = 2; \t\t// GP Timer1连续增计数模式\n\tEvaRegs.T1CON.bit.TCLKS10 = 0; \t// 选择内部时钟T1CLK\n\n\tEvaRegs.T1CNT = 0x0000;\t\t// Clear the counter for GP timer 1\n\tEvaRegs.T1PR = 0x3A97;\t\t// 频率为5kHz，PR = 14999\n\n\t/*\n\t * 配置全比较模块\n\t */\n\tEvaRegs.COMCONA.bit.CENABLE = 1;\t\t// 使能EVA的全比较操作\n\tEvaRegs.COMCONA.bit.FCOMPOE = 1;\t// 使能比较输出\n\n\tEvaRegs.COMCONA.bit.CLD = 0;\t\t\t\t// 比较寄存器重载条件为下溢中断\n\n\tEvaRegs.CMPR1 = 0x1D4C;\t// 默认占空比为50%\n\tEvaRegs.CMPR2 = 0x1D4C;\t// 默认占空比为50%\n\tEvaRegs.CMPR3 = 0x1D4C;\t// 默认占空比为50%\n\tEvaRegs.ACTR.all = 0;\t\t\t// 全部强制低\n\n\t/*\n\t * GP Timer1下溢中断配置\n\t */\n\tEvaRegs.EVAIMRA.bit.T1UFINT = 1;\t\t// 使能GP Timer1下溢中断\n\tEvaRegs.EVAIFRA.bit.T1UFINT = 1;\t\t// 复位GP Timer1下溢中断标志位\n    \n    \n    EvaRegs.CAPFIFO.all = 0; // 初始化CAPFIFOA\n\n\tEvaRegs.CAPCON.bit.CAPRES = 0; \t\t\t// 清零捕获寄存器\n\tEvaRegs.CAPCON.bit.CAPQEPN = 1; \t\t// 使能捕获单元1,2\n\tEvaRegs.CAPCON.bit.CAP3EN = 1;\t\t\t// 使能捕获单元3\n\tEvaRegs.CAPCON.bit.CAP3TSEL = 1;\t\t// 捕获单元3时基为timer1\n\tEvaRegs.CAPCON.bit.CAP12TSEL = 1;\t\t// 捕获单元1,2时基为timer1\n\n\tEvaRegs.CAPCON.bit.CAP1EDGE = 0x3;\t// 捕获单元1捕获边沿为上升下降沿\n\tEvaRegs.CAPCON.bit.CAP2EDGE = 0x3;\t// 捕获单元2捕获边沿为上升下降沿\n\tEvaRegs.CAPCON.bit.CAP3EDGE = 0x3;\t// 捕获单元3捕获边沿为上升下降沿\n\n\tEvaRegs.EVAIMRC.bit.CAP1INT = 1;\t\t// 使能捕获单元1中断\n\tEvaRegs.EVAIMRC.bit.CAP2INT = 1;\t\t// 使能捕获单元2中断\n\tEvaRegs.EVAIMRC.bit.CAP3INT = 1;\t\t// 使能捕获单元3中断\n\tEvaRegs.EVAIFRC.all = 0x7;\t\t// 复位捕获单元中断标志位\n\n\tEvaRegs.T1CON.bit.TENABLE = 1; \t// 使能t1计数\n\n}\n```\n\n\n\n# 九、ADC\n\n- 2812的ADC分辨率为12bit，具有流水线结构，具有16个通道，分为2组：一组为ADCINA0 ~ ADCINA7，另一组为ADCINB0 ~ ADCINB7，分别对应两个采样保持器。虽然通道很多，但是转换器只有一个，所以要对各通道进行排序转换。\n\n- ADC模块的时钟最高频率为25MHz，最高采样率为12.5MSPS（sample per second）。\n- ADC电压的采样范围是<u>0 ~ 3 V</u>\n- ADC模块对一个序列的通道开始转换必须要有一个启动信号来触发，当信号到来时，相应的序列发生器就开始对内部预先指定的通道进行转换。\n- ADC有两种工作模式：\n  - 两个独立的8通道\n  - 级联16个通道\n- ADC共有16个结果寄存器来存储转换的数值。\n\n## 工作方式\n\n通过16位的ADC输入通道选择序列控制寄存器ADCCHSELSEQx（x=1, 2, 3, 4）可以控制ADC通道的<u>转换顺序</u>。\n\n每个ADCCHSELSEQx被分为了4段，每段其名为：CONVxx（x = 00 ~ 15）。\n\n- 当ADC工作在**双序列发生器模式**下时，序列发生器SEQ1使用ADCCHSELSEQ1和2，每个CONVx可以选择的通道为ADCINA0 ~ 7；SEQ2使用ADCCHSELSEQ3和4，每个CONVx可以选择的通道为ADCINB0 ~ 7;\n- 当ADC工作在**级联模式**下时则都可自由选择。\n\nADC转换的<u>通道数量</u>由最大通道转换寄存器ADCMAXCONV决定。\n\n- 当工作在双序列发生器模式下时，该寄存器的低三位[0:2]所代表的**二进制数 + 1**决定SEQ1序列发生器转换的通道数量；[4:6]位决定SEQ2转换的通道数量。\n- 工作在级联模式下时，低四位[0:3]决定转换通道的数量，为其代表的**二进制数 + 1**\n\nADC还有顺序采样和并发采样两种采样方式，所以排列组合一下，就有：\n\n- 双通道顺序采样\n- 级联顺序采样\n- 双通道并发采样\n- 级联并发采样\n\n四种模式。\n\n下面是一个配置双序列顺序采样的例子：\n\n```c\n\tAdcRegs.ADCTRL1.bit.SEQ_CASC = 0; //独立双排序模式\n\tAdcRegs.ADCTRL1.bit.CONT_RUN = 0; //启动停止模式\n\n\t// 级联双排序的排序器配置\n\tAdcRegs.MAX_CONV.bit.MAX_CONV = 0x0032; // B组采样通道为4，A组采样通道为3\n\tAdcRegs.CHSELSEQ1.bit.CONV00 = 0x0; // 选择模拟通道ADCINA0\n\tAdcRegs.CHSELSEQ1.bit.CONV01 = 0x1; // 选择模拟通道ADCINA1\n\tAdcRegs.CHSELSEQ1.bit.CONV02 = 0x2; // 选择模拟通道ADCINA2\n\n\tAdcRegs.CHSELSEQ3.bit.CONV08 = 0xB; // 选择模拟通道ADCINB3\n\tAdcRegs.CHSELSEQ3.bit.CONV08 = 0xC; // 选择模拟通道ADCINB4\t\n\tAdcRegs.CHSELSEQ3.bit.CONV08 = 0xD; // 选择模拟通道ADCINB5\n\tAdcRegs.CHSELSEQ3.bit.CONV08 = 0xE; // 选择模拟通道ADCINB6\n```\n\n序列发生器的工作模式有两种：启停模式和连续转换模式。由ADCTRL1的CONT_RUN位控制。在连续转换模式下，当一次序列转换结束后，会自动从该序列头部开始重新进行转换。当工作在启停模式下的时候，序列发生器完成一次转换后会停留在最后状态，需要先**手动复位**后才能在下一次SOC（start of conversion）信号到来时才会重新开始转换。\n\n```c\nAdcRegs.ADCTRL2.bit.RST_SEQ1 = 1;  // 手动复位序列发生器\n```\n\n## 结果读取\n\nADC的采样结果存储在16个16位的ADC结果寄存器里，左对齐，结果占据高12位，所以计算的时候需要右移4位。\n\n$(ADResult >> 4) = \\frac{(V_{i}  - ADCCLO)}{3 V} *4095$\n\nADCLO一般接模拟地，所以为0：\n\n```c\nres = (AdcRegs.RESULT0 >> 4) / 4095 * 3;\n```\n\n\n\n# 十、SPI\n\n串行外设接口，是一种**低速同步串行通信接口**，而SCI是异步通信。\n\n- 异步通信和同步通信的区别在于**收发双方是否使用同一个时钟信号来控制数据收、发移位操作**。\n\n## 工作方式\n\nSPI总线至少包含一根时钟线和数据线。2812使用4线制SPI，以主从方式进行工作，全双工通信。通信系统中通常有一个主设备和多个从设备。\n\n|                     线路名称                     |           功能           |\n| :----------------------------------------------: | :----------------------: |\n|                       SCK                        | 串行时钟线（主设备控制） |\n|                       MISO                       |    主机输入/从机输出     |\n|                       MOSI                       |    主机输出/从机输入     |\n| <span style=\"text-decoration:overline\">CS</span> | 是低电平有效的从机选择线 |\n\nSPI的波特率 = SPICLK <= LSPCLK/4。实际使用时要确保小于从机的最大允许速率。\n\n<img src=\"..\\img\\DSP\\spi.png\" alt=\"spi\" style=\"zoom:75%;\" />\n\n"},{"url":"/git_note/","content":"# git配置\n\n`git config --global user.name \"...\"`\n\n`git config --global user.email\"...\"`\n\n# 使用git\n\n`git status`: 查看当前目录的文件状态\n\n`git init` :初始化仓库\n\n# 文件状态\n\n- 未跟踪\n\n- 已跟踪\n\n  - 暂存：文件已修改且保存，但还没有提交到git仓库\n  - 未修改\n  - 已修改\n\n  \n\n  刚刚添加到仓库的文件是未跟踪状态。\n\n  `git add 文件名` ：将文件从**未跟踪**切换到**暂存**的状态\n\n  `git add *`：将所有已修改 (未跟踪) 的文件暂存\n\n  `git add -u`：只对**已跟踪文件**有效，把所有已修改的已跟踪文件暂存\n\n  `git add -A`：把所有的变化（包括删除的和添加的文件）暂存\n\n  `git commit -m \"<message>\" `：将**暂存**的文件存到仓库里, message是本次提交的日志信息，状态变成 **未修改**\n  \n  `git commit -a -m \"<message>\"`:提交所有已修改的文件\n  \n  文件发生变化时，变成**已修改**的状态\n\n​\t\t`git log`：查看历次提交的记录\n\n​\t\tbouns: `git log --pretty=oneline`\n\n可以在vscode里使用图形化界面git\n\n# 常用命令\n\n1. 重置文件\n\n```bash\ngit restore <filename> \n#修改后，还未暂存时，可以用来恢复文件\n\ngit restore --stage <filename> #取消暂存状态，不会取消删除的文件\n```\n\n如果要取回被删的文件，还要再restore一下\n\n\n\n2. 恢复某版本的某文件\n\n   ```bash\n   git checkout 9f955d85359fc8e4504d7220f13fad34f8f2c62b ./recipes/tofu\n   ```\n\n   - 恢复版本`9f955d85359fc8e4504d7220f13fad34f8f2c62b`的文件`./recipes/tofu`\n   - 注意，`checkout`命令不会改变提交记录，且必须==指定要恢复的文件名==，否则会出现bug（如遇此种情况，见：[Git WTFs](https://sp18.datastructur.es/materials/guides/git-wtfs.html)）\n   - 回滚之后，需要再`commit`一次。\n\n   \n\n3. <span id=\"change-commit-messages\">修改最近的提交注释信息</span>：\n\n   ```bash\n   git commit --amend\n   ```\n\n   更多请参考：https://blog.csdn.net/qq_17011423/article/details/104648075\n\n   - 修改前几次的提交注释信息：https://docs.github.com/en/pull-requests/committing-changes-to-your-project/creating-and-editing-commits/changing-a-commit-message\n\n   \n\n4. 删除文件\n\n```bash\ngit rm <filename>\ngit rm -f <filename> #强制删除\n\n```\n\n\n\n\n5. 移动文件（重命名）\n\n```bash\ngit mv from to #移动文件/重命名文件\n```\n\n# 分支\n\ngit在commit文件时，每次都会创建一个节点，记录代码的状态。\n\n节点会构成一个树状结构，存在分支。\n\n默认情况下，只有一个分支，叫做 \"master\"\n\n```bash\ngit branch #查看当前分支\ngit branch <branch name> #新建一个分支\ngit branch -D <branch name> #删除分支\ngit switch <branch name>\t#切换分支\ngit switch -c <branch name> #创建并切换分支\n```\n\n在开发中，都是在自己的分支里写代码。写好无误后，再合并分支。\n\n- 合并分支\n\n```bash\ngit switch master\t#切换到主分支\ngit merge <branch name> #合并分支\ngit branch -D <branch name> #合并之后可以删除不需要的分支\n```\n\n\n\n在装了插件的VScode里面的COMMIT DETAILS里，可以通过graph来查看所有分支的情况\n\n<img src=\"..\\img\\gitPics\\image-20221219172950437.png\" alt=\"image-20221219172950437\" style=\"zoom:50%;\" />\n\n有的时候，分支可以快速合并（fast-forward)，但有时候，合并时分支的文件之间会产生冲突。git会帮助你标识出冲突所在，这时候需要手动合并，然后暂存和提交：\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n<body>\n    <h1>wawawa</h1>\n<<<<<<< HEAD\n    <h2>bugbug fixfix</h2>\n=======\n    <h1>jjj</h1>\n    <h1>wuwuwu</h1>\n    <ul>\n        <li>wiwdiu</li>\n    </ul>\n>>>>>>> test\n</body>\n</html>\n```\n\n# 变基(rebase)\n\n当开发分支较多时，merge会把分支树变得很乱。此时可以使用变基来合并分支。\n\n==注意：==变基操作一般只在自己的本地仓库使用，远程服务器的仓库不可以使用变基。\n\n1. 发起变基时，git会先找到两条最近分支的最近祖先\t\n2. 把当前分支和合并分支的共同祖先进行比对，把所有的变化提取出来存到一个临时文件里\n3. 将当前分支的祖先指向目标分支的基底\n4. 从当前基底开始重新执行之前临时存起来的操作\n\n```bash\ngit switch <filename>\ngit rebase <target filename>\n```\n\n### 利用变基合并commits\n\n参考：\n\n1. https://stackoverflow.com/questions/2563632/how-can-i-merge-two-commits-into-one-if-i-already-started-rebase\n\n2. https://stackoverflow.com/questions/12522565/how-can-i-combine-two-commits-into-one-commit\n\n**注意事项**：如果你正在使用远程仓库，且这个仓库的贡献者不止你一个人，那么在主分支上进行下列操作可能会使他人的文件丢失。您最好==在自己的分支上进行变基==，或者在操作前与他人充分沟通。\n\n**步骤**：\n\n1. 使用`git log --pretty=oneline`查看你需要合并的commits:\n\n```bash\n$ git log --pretty=oneline\na931ac7c808e2471b22b5bd20f0cad046b1c5d0d c\nb76d157d507e819d7511132bdb5a80dd421d854f b\ndf239176e1a2ffac927d8b496ea00d5488481db5 a\n```\n\n假设提交的先后顺序是 a --> b --> c，你需要合并 c 和 b\n\n2. 使用`git rebase -i HEAD~2` （<a href=\"#chatGPT expaination on the command\">chatGPT expaination on the command</a>）,这个命令会打开一个文本文件，让你查看最近的两条提交记录，注意和`git log`输出不同，**较新的提交记录在下面，比较旧的在上面。**\n\n```bash\npick b76d157 b\npick a931ac7 c\n\n# Rebase df23917..a931ac7 onto df23917\n#\n# Commands:\n#  p, pick = use commit\n#  r, reword = use commit, but edit the commit message\n#  e, edit = use commit, but stop for amending\n#  s, squash = use commit, but meld into previous commit\n#  f, fixup = like \"squash\", but discard this commit's log message\n#\n# If you remove a line here THAT COMMIT WILL BE LOST.\n# However, if you remove everything, the rebase will be aborted.\n#\n```\n\n3. 把**较新的commit**前面的`pick`改成`squash`，然后保存并退出 :\n\n```bash\npick   b76d157 b\nsquash a931ac7 c\n```\n\n4. 之后你会得到提示：\n\n```bash\n# This is a combination of 2 commits.\n# The first commit's message is:\n\nb\n\n# This is the 2nd commit message:\n\nc\n```\n\n5. 再次用`git log --pretty=oneline`查看，就会看到：\n\n```bash\n$ git log --pretty=oneline\n18fd73d3ce748f2a58d1b566c03dd9dafe0b6b4f b and c\ndf239176e1a2ffac927d8b496ea00d5488481db5 a\n```\n\n大功告成！\n\n如果你对commit信息不满意，那么可以自行<a href=\"#change-commit-messages\">修改commit信息</a>。\n\n6. 如果你在推送到远程仓库时失败了，尝试使用`git push -f` 来进行推送。**请确保你的这步操作不会影响到正在使用同一仓库的其他人！！！**\n\n\n\n### chatGPT expaination on the command\n\n> The command `git rebase -i HEAD~6` starts an interactive rebase process that allows you to interactively edit the last six commits on the current branch.\n>\n> More specifically, the `-i` flag tells Git to start an interactive rebase, while `HEAD~6` specifies the parent of the current commit. In this case, the parent of the current commit is six commits ago.\n>\n> By running this command, Git will open an interactive file in your default text editor, showing you the last six commits on the branch. You can then edit the file to choose which commits to keep, squash, or edit, among other options. Once you've made your changes and saved the file, Git will apply your changes and rewrite the Git history of the branch with your new commit history.\n>\n> Note that the `git rebase` command should be used with caution, especially when rewriting Git history. If you're working with a shared repository or collaborating with others, you should communicate with them before rewriting the Git history of a branch.\n\n# tag标签\n\n- 分离头指针：\n\n```bash\ngit switch <commit id> --detach   #commit id可以只写前几位\n```\n\n把头指针移动到早期创建的某个节点上。注意：==此时只能预览，不可以修改和提交代码。==\n\n\n\n- 如果要在早期的节点上进行修改，请在该早期节点上==创建新分支==：\n\n```bash\ngit switch -c <new branch name> <commit id>\n```\n\n\n\n但是，如果版本很多，找到某个特定的节点很困难。使用**标签**来给特定的节点做记号。\n\n- 标签\n\n```bash\ngit tag #显示当前节点的所有标签\ngit tag <tag name> #给当前节点添加一个标签 比如 v1.0\ngit tag <tag name> <cmt id> #给某个节点添加标签\n\n#使用标签来操作：\ngit push <remote> <tag name> #给远程仓库的版本加标签(推送本地标签到远程仓库)\ngit push <remote> --tags #推送所有本地标签\ngit -d <tag name> #删除本地标签\ngit push <remote> --delete <tagname> #删除远程仓库的标签\n```\n\n之后，我们就可以通过标签来快速之前的定位节点，创建新分支了。\n\n```bash\ngit switch -c <tag name>\n```\n\n\n\n# 远程仓库(remote)\n\n- GitHub\n- Gitee\n\n上传到github：\n\n```bash\ngit remote add origin https://github.com/lilichao/git-demo.git\n# git remote add <remote name> <url>\n\ngit branch -M main\n# 修改分支的名字的为main\n\ngit push -u origin main\n# git push 将代码上传服务器上\n```\n\n\n\n## 远程库的操作的命令\n\n```bash\ngit remote # 列出当前的关联的远程库\ngit remote add <远程库名> <url> # 关联远程仓库\ngit remote remove <远程库名>  # 删除远程库\n\ngit push -u <远程库名> <分支名> # 向远程库推送代码，并和当前分支关联\ngit push <远程库> <本地分支>:<远程分支> #推送到指定的远程分支\n\ngit clone <url> # 从远程库下载代码\ngit clone <url> <new filename># 从远程库下载代码,并重命名\n\ngit push # 如果本地的版本低于远程库，push默认是推不上去\ngit fetch # 要想推送成功，必须先确保本地库和远程库的版本一致，fetch它会从远程仓库下载所有代码，但是它不会将代码和当前分支自动合并\n\t\t # 使用fetch拉取代码后，必须要手动对代码进行合并\ngit merge origin/master #手动合并\ngit pull  # 从服务器上拉取代码并自动合并 \n```\n\n==注意：==\n\n==1. 推送代码之前，一定要先从远程库中拉取最新的代码==\n\n==2. 写自己的代码前，一定要创建新分支==\n\n\n\n## origin/main/master\n\n来源：https://blog.csdn.net/reykou/article/details/104866348\n\n1. GIT 初始化：本地默认分支叫 master、服务器默认名为 origin。本地分支 master 同步到服务器上、服务器节点变成 orgin/master\n2. 本地创建分支名为 branch，本地分支 branch 同步到服务器上、服务器节点变成 orgin/branch\n3. 更新本地分支 master，用本地分支 master 更新服务器节点 orgin/master\n\n\n\n## git代理的设置\n\n远程库连接很缓慢，那么，我们可以通过配置代理来解决这个问题。\n\n首先查看你的代理软件的相关设置，搞清楚你代理使用的本地socks端口：\n\n<img src=\"..\\img\\gitPics\\socksPort.png\" style=\"zoom:100%;\" />\n\n```bash\ngit config --global https.proxy http://127.0.0.1:10808  #设置为你自己的端口，比如我的是10808\n\ngit config --global https.proxy https://127.0.0.1:10808\n\ngit config --global --unset http.proxy\n\ngit config --global --unset https.proxy\n```\n\n参考：https://gist.github.com/laispace/666dd7b27e9116faece6\n\n\n\n## 远程库解决push授权问题\n\n配置完代理，可能会引发如下问题：\n\n```bash\nAdministrator@USER-20160428EL MINGW64 /f/awsl/Java/cs61b/AceMyFile (master)\n$ git push origin master\nfatal: NotSupportedException encountered.\n   The ServicePointManager does not support proxies with the socks5h scheme.\nerror: unable to read askpass response from 'E:/git/Git/mingw64/libexec/git-core/git-gui--askpass'\nUsername for 'https://github.com': xxxx\nremote: Support for password authentication was removed on August 13, 2021.\nremote: Please see https://docs.github.com/en/get-started/getting-started-with-git/about-remote-repositories#cloning-with-https-urls for information on currently recommended modes of authentication.\nfatal: Authentication failed for 'https://github.com/xxxx/xxxx.git/'\n\n```\n\n如果用VSCode推送好像可以绕开这个问题。\n\n但是，如果使用命令行来推送：\n\n```bash\n$ git push origin master\nfatal: NotSupportedException encountered.\n   The ServicePointManager does not support proxies with the socks5h scheme.\nerror: unable to read askpass response from 'E:/apps/git/Git/mingw64/libexec/git-core/git-gui--askpass'\nremote: Support for password authentication was removed on August 13, 2021.\nremote: Please see https://docs.github.com/en/get-started/getting-started-with-git/about-remote-repositories#cloning-with-https-urls for information on currently recommended modes of authentication.\nfatal: Authentication failed for 'https://github.com/0xtopus/CS61B-repo.git/'\n```\n\n发现2021年8月13日之后URL推送的方法就已经不支持了。\n\n于是，我们可以采用ssh的方法来推送。\n\n### ssh方法\n\n参考1：https://www.cnblogs.com/yuqiliu/p/12551258.html\n\n参考2：https://blog.csdn.net/lonyw/article/details/75392410\n\n\n\n1. 先查看自己本地设置的邮箱：\n\n   ```bash\n   git config –global user.email\n   ```\n\n2. 然后输入：\n\n   ```bash\n   ssh-keygen -t rsa -C \"你设置的邮箱\"\n   ```\n\n   代码参数含义：\n\n   -t 指定密钥类型，默认是 rsa ，可以省略。\n   -C 设置注释文字，比如邮箱。\n   -f 指定密钥文件存储文件名。\n\n   然后会输出一些提示让你操作。连续按三个回车，全部默认即可。\n\n   （三个操作分别是：选择使用默认路径存放ssh秘钥（`/c/Users/Administrator/.ssh/id_rsa`），不使用`paaphrase`私钥，确认私钥。\n\n   关于私钥的作用，一般可以不要：\n\n   > What is passphrase in git?\n   >\n   > With SSH keys, if someone gains access to your computer, the attacker can gain access to every system that uses that key. **To add an extra layer of security, you can add a passphrase to your SSH key**. To avoid entering the passphrase every time you connect, you can securely save your passphrase in the SSH agent. \n   >\n   > source: https://docs.github.com/en/authentication/connecting-to-github-with-ssh/working-with-ssh-key-passphrases\n\n   完成以上操作，你会看到类似下面的输出：\n\n   ```bash\n   Generating public/private rsa key pair.\n   Enter file in which to save the key (/c/Users/Administrator/.ssh/id_rsa):\n   Created directory '/c/Users/Administrator/.ssh'.\n   Enter passphrase (empty for no passphrase):\n   Enter same passphrase again:\n   Your identification has been saved in /c/Users/Administrator/.ssh/id_rsa\n   Your public key has been saved in /c/Users/Administrator/.ssh/id_rsa.pub\n   The key fingerprint is:\n   SHA256:lhiwE3T6NRzcttxFPBj5LDpy0CtmnYG/55NqOuRK3Tk gsy@gsy123mailbox.com\n   The key's randomart image is:\n   +---[RSA 3072]----+\n   |   .+ ....  .*.  |\n   |     * ...o o +  |\n   |    + . += o + . |\n   |     o +oo= o o  |\n   |      o S+ = .   |\n   |       o*.O.     |\n   |      .=.+Eo .   |\n   |     .  o o.+    |\n   |      ...+.+..   |\n   +----[SHA256]-----+\n   \n   ```\n\n3. 然后输入：\n\n   ```bash\n   ssh -T git@github.com\n   ```\n\n   得到输出：\n\n   ```bash\n   The authenticity of host 'github.com (140.82.112.4)' can't be established.\n   ECDSA key fingerprint is SHA256:xxxxxx.\n   Are you sure you want to continue connecting (yes/no/[fingerprint])? \n   ```\n\n   输入yes，回车继续，看到如下输出即成功：\n\n   ```bash\n   Warning: Permanently added 'github.com,140.82.112.4' (ECDSA) to the list of known hosts.\n   Hi xxxx! You've successfully authenticated, but GitHub does not provide shell access.\n   ```\n\n   \n\n4. 接下来可以通过`git remote -v`查看远程主机的状态，看到：\n\n   ```bash\n   origin  https://github.com/xxxx.git (fetch)\n   origin  https://github.com/xxxx.git (push)\n   ```\n\n   说明还是通过URL方式访问，接下来我们来修改为ssh方式。\n\n5. 打开你的github仓库页面：\n\n   <img src=\"..\\img\\gitPics\\ssh.png\" style=\"zoom:75%;\" />\n\n6.  输入下列命令：\n\n   ```bash\n   git remote set-url origin git@github.com:xxxx.git\n   ```\n\n   `git@github.com:xxxx.git`就是你刚刚复制的内容。\n\n   再次`git remote -v`\n\n   看到：\n\n   ```bash\n   origin  git@github.com:xxxx.git (fetch)\n   origin  git@github.com:xxxx.git (push)\n   ```\n\n   就大功告成啦！\n\n   现在就可以直接push了：\n\n   ```bash\n    git push origin master\n   ```\n\n   \n\n\n\n\n\n\n\n## GitHub添加/删除关联的远程仓库\n\n参考：https://blog.csdn.net/ltstud/article/details/79935001\n\n```bash\ngit remote add <远程仓库名> <本地库名>\ngit remote rm <远程仓库名> \n```\n\n\n\n# 换邮箱后的配置\n\n比如ssh什么的，参见：https://gist.github.com/Heron-Wang/1f608c4c93065d1ebd67f7b29e3be791\n\n\n\n# gitignore\n\n- 默认情况下，git会监视项目里所有的文件。但是有时候，不是所有的文件都需要被git监视。\n- 使用 *gitignore* 来让git忽略它们\n- 在项目目录里新建一个 `.gitignore` 文件，把要忽略的文件名输入进去\n\n```\n#注释\nnode_modules\nyarn.lock\n*.log\n```\n\n\n\n## git ignore 配置\n\n1. 使用`!<filename>`来使git不忽略某个文件。比如你需要git不忽略某个叫做`MyFile`的文件夹下的所有文件，在`.gitignore`里你可以这样写：\n\n   ```txt\n   !MyFile/*\n   ```\n\n   \n\n2. \n\n\n\n# 查看git配置\n\n```bash\ngit config <配置名> #查看某个配置情况\n```\n\n更多配置：https://www.atlassian.com/zh/git/tutorials/setting-up-a-repository/git-config\n\n\n\n# GitHub 只添加已追踪的文件\n\n```bash\ngit add -u\n```\n\nref: https://www.google.com/search?q=how+to+add+tracked+files+only+in+git&oq=how+to+add+tracked+files+only+in&aqs=chrome.1.69i57j33i10i160l3.16226j0j9&sourceid=chrome&ie=UTF-8\n\n使用前：\n```bash\nAdministrator@USER-20160428EL MINGW64 /f/awsl/Java/cs61b (master)\n$ git status\nOn branch master\nYour branch is ahead of 'origin/master' by 2 commits.\n  (use \"git push\" to publish your local commits)\n\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n        modified:   lab2/DebugPractice/DebugExercise1.java\n        modified:   lab2/DebugPractice/DebugExercise2.java\n        modified:   lab2/Intlist/IntList.java\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n        lab2/.idea/\n        lab2setup/.idea/\n        lab2setup/out/\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n```\n\n使用：\n```bash\nAdministrator@USER-20160428EL MINGW64 /f/awsl/Java/cs61b (master)\n$ git add -u\n```\n\n使用后：\n```bash\nAdministrator@USER-20160428EL MINGW64 /f/awsl/Java/cs61b (master)\n$ git status\nOn branch master\nYour branch is ahead of 'origin/master' by 2 commits.\n  (use \"git push\" to publish your local commits)\n\nChanges to be committed:\n  (use \"git restore --staged <file>...\" to unstage)\n        modified:   lab2/DebugPractice/DebugExercise1.java\n        modified:   lab2/DebugPractice/DebugExercise2.java\n        modified:   lab2/Intlist/IntList.java\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n        lab2/.idea/\n        lab2setup/.idea/\n        lab2setup/out/\n\n```\n\n\n\n# Github ICU\n\n远程仓库和本地仓库出现较大混乱时，可以这样恢复到希望回到的之前的某个commit版本。\n\n首先，进入你的本地仓库，使用`git log`命令找到你希望退回的**commit版本号**，然后使用：\n\n```bash\ngit reset --hard <commit>\n```\n\n回到你希望的commit版本。但是，在使用之前，==你最好将文件进行备份==，以免reset到错误的版本后丢失数据。\n\n你也可以使用`git reflog`来查看之前的操作，并且可以通过`git reflog`里提供的commit版本号来再次使用`reset --hard`命令回溯到操作前所在的commit版本（可以作为reset错误后的后悔药！）\n\n然后，对远程仓库使用强行同步更新：\n\n```bash\ngit push -f \n```\n\n[^参考1]:  https://stackoverflow.com/questions/42860234/how-to-undo-a-merge-in-github，Stack Overflow的相关回答。\n[^参考2]:  https://initialcommit.com/blog/git-reset，对reset的详细讲解\n[^参考3]:https://stackoverflow.com/questions/495345/how-to-remove-selected-commit-log-entries-from-a-git-repository-while-keeping-th，Stack Overflow.\n[^参考4]: https://stackoverflow.com/questions/4114095/how-do-i-revert-a-git-repository-to-a-previous-commit，Stack Overflow上的一个比较详细的高赞回答，不过我没细看...\n[^参考5]: https://stackoverflow.com/questions/29042783/how-can-i-delete-all-commits-before-a-given-date-in-git-history，Stack Overflow：how can I delete all commits before a given date in git history.\n\n\n\n```bash\nAdministrator@USER-20160428EL MINGW64 /f/awsl/Java/cs61b (master)\n$ git log\ncommit cca2edf5fbf99d5295cca7c0c56c807f0e2194ab (HEAD -> master, origin/master, origin/HEAD)\nAuthor: cyber_octopus <gsy@gsy123mailbox.com>\nDate:   Sat Feb 11 17:00:26 2023 +0800\n\n    reset files\n\ncommit ad9c8610ec1d326fa88c7a8088ae53b4fe6fff5c\nAuthor: cyber_octopus <gsy@gsy123mailbox.com>\nDate:   Fri Feb 10 11:06:37 2023 +0800\n\n    fix the bug of IntList.java*\n\ncommit c0ae005a84005d9f528673b36ca4507386ac711c\nAuthor: cyber_octopus <gsy@gsy123mailbox.com>\nDate:   Thu Feb 9 23:02:06 2023 +0800\n\n    add IntList.java with a small bug which would count one less size of the IntList and also modify my note a bit\n\ncommit 3bae4aa49e997c62db531f53c6427ea510f90942\nAuthor: cyber_octopus <gsy@gsy123mailbox.com>\nDate:   Wed Feb 8 22:26:27 2023 +0800\n\n    add .gitignore, SumArg.java and modify my note\n\ncommit 4f461e2ca33d4d7e878011305dd401d91209f13e\nAuthor: cyber_octopus <gsy@gsy123mailbox.com>\nDate:   Sat Feb 4 23:26:25 2023 +0800\n\n    create new README file and tweak my first week  java note\n\ncommit 14f93eae87f460eebf10617cbb650d2ca0af8c57\nAuthor: cyber_octopus <gsy@gsy123mailbox.com>\nDate:   Sat Feb 4 23:20:55 2023 +0800\n\n    finish the first week task\n\ncommit 5551fe36d65a915e35b7af01beb615cf596d9902\nAuthor: cyber_octopus <gsy@gsy123mailbox.com>\nDate:   Sat Feb 4 21:47:51 2023 +0800\n\n    commit first week's stuff\n\n\nAdministrator@USER-20160428EL MINGW64 /f/awsl/Java/cs61b (master)\n$ git reflog\ncca2edf (HEAD -> master, origin/master, origin/HEAD) HEAD@{0}: commit: reset files\nad9c861 HEAD@{1}: reset: moving to ad9c8610\na09fb44 HEAD@{2}: checkout: moving from master to master\na09fb44 HEAD@{3}: pull --allow-unrelated-histories: Merge made by the 'recursive' strategy.\n7ef79fc HEAD@{4}: rebase finished: returning to refs/heads/master\n7ef79fc HEAD@{5}: rebase: delete all skeleton files\n4f0a62f HEAD@{6}: rebase: delete all skeleton file and try to set up again\n0515c34 HEAD@{7}: rebase: lab1 ready to submit\na3610f2 HEAD@{8}: rebase: add all files from official repo of cs61b\nad9c861 HEAD@{9}: rebase: fix the bug of IntList.java*\nc0ae005 HEAD@{10}: rebase: add IntList.java with a small bug which would count one less size of the IntList and also modify my note a bit\n3bae4aa HEAD@{11}: rebase: add .gitignore, SumArg.java and modify my note\n4f461e2 HEAD@{12}: pull --rebase --allow-unrelated-histories skeleton master: create new README file and tweak my first week java note\n14f93ea HEAD@{13}: pull --rebase --allow-unrelated-histories skeleton master: finish the first week task\n5551fe3 HEAD@{14}: pull --rebase --allow-unrelated-histories skeleton master: commit first week's stuff\nfa6b0b8 (skeleton/master) HEAD@{15}: pull --rebase --allow-unrelated-histories skeleton master: checkout fa6b0b8a7f1d83bf1aa47b9182bce4cad238f14e\n\nAdministrator@USER-20160428EL MINGW64 /f/awsl/Java/cs61b (master)\n$ git reset 7ef79fc\n\n```\n\n\n\n\n\n\n\n# GitHub大量删除和添加文档后批量暂存\n\n参考：https://blog.csdn.net/haohaibo031113/article/details/70821321\n\n```bash\ngit add -A  # GitHub大量删除和添加文档后批量暂存，也可以用 rm 命令来处理删除的文件\n```\n\n\n\n# GitHub重命名远程仓库\n\n```bash\ngit branch -M main #把当前master分支改名为main, 其中-M的意思是移动或者重命名当前分支\n```\n\n参考：https://juejin.cn/post/7051873701305778207\n\n\n\n# 小技巧\n\n1. 在命令行模式下，在要打开的目录里输入：\n\n```bash\ncode .\n```\n\n即可用vscode打开当前目录\n\n# 深入研究\n\nhttps://git-scm.com/book/en/v2\n\n# GitHub部署静态页面\n\n详见Hexo，Docusaurus等静态站点生成器的官网。\n\n\n\n# 复习\n\n在https://learngitbranching.js.org/?locale=zh_CN上练习git的基本操作命令，将复习的笔记记录在这里。\n\n## 分支\n\n```bash\ngit branch <new branch name>\n```\n\n- Switch to the new branch:\n\n```bash\ngit checkout <branch name>\n# or you can use:\ngit switch <branch name>\n```\n\n- Create new branch and switch to it immediately:\n\n```bash\ngit checkout -b <new branch name>\n```\n\n## Merge\n\n- To merge branches, say if there are two parallel branches `bugFix` and `main`, and we want to merge `bugFix` to `main`:\n\n```bash\ngit switch main\t# switch to the target branch\ngit merge bugFix # merge another branch to the target branch\n```\n\n## Rebase\n\nTo make commit history look more linear, we can \"rebase\" one of two parallel branches to another:\n\n```bash\ngit switch bugFix\ngit rebase main\n# now your \"bugFix\" branch is one node ahead of \"main\" branch\n```\n\n## HEAD Moving\n\nBy default, HEAD always points to the latest commit history. It is like: `HEAD -> main -> \"Hashtag of last commit\"`.\n\nTo move \"HEAD\" to point to a commit history at somewhere:\n\n```bash\ngit checkout <Hashtag of the commit history>\n```\n\nnow the HEAD is pointing to the given hashtag: `HEAD -> the given hashtag`\n\n- Relative branch movement:\n\n```bash\ngit branch -f <branch to move> <reference name>~<num>\n# for example:\ngit branch -f main HEAD~\t\t# move main to the previous node of HEAD\ngit branch -f bugFix <Hashtag>\t# move bugFix to the specified hashtag\ngit branch -f main bugFix~2 \t# move main to the second previous node of bugFix\n```\n\n- Atn alternative way to move HEAD\n\n```bash\n# All these three move HEAD according to the relative position of target\ngit checkout main^\ngit checkout <hashtag>^\ngit checkout HEAD~\n```\n\n## Undo changes\n\n- `git revert`: create a new commit which is identical to the given one.\n\n  <span style=\"font-weight:bold;color:red\">Recommend when there's something need to be undone in remote repo</span>\n\n```bash\ngit revert HEAD\t# create a new commit the same as the previous one to the current commit.\n```\n\n- `git reset`: move the commit backward(The change of undone commit is still alive but in the state of not added.) \n\n  <span style=\"font-weight:bold;color:red\">Recommend to edit local commit history only!</span>\n\n```bash\ngit reset HEAD~1\t# undo the latest commit\n```\n\n\n\n"},{"title":"CSS笔记","url":"/CSS笔记/","content":"# CSS\n参考：[Client-Side Web Development](https://info340.github.io/css.html)\n## 一、覆盖规则\n\n同级的选择器的同一个属性，谁最后渲染谁生效；\n\n不同级的选择器，最具体的（比如#id比.class具体）优先级最高。\n\n## 二、 复合选择器\n\n### 多个选择器组合\n\n```css\n/* can also include class or id selectors */\n/* this rule applies to h2 elements, \"menu\" classed elements, and the\n   #sidebar element */\nh2, .menu, #sidebar {\n    background-color: gray;\n}\n```\n\n> since later rules take precedence earlier ones, you can use a group select to apply a property to multiple different elements, then include additional rules to add variations.\n\n### 组合选择器\n\n```css\n/* Selects only p elements that have class=\"alert\"\n   Other p elements and \"alert\" classed elements not affected */\np.alert {\n  color: red;\n}\n\n/* Selects only h1 elements that have id=\"title\" */\n/* Note that this is redundant, since only one element can have the id! */\nh1#title {\n  color: purple;\n}\n\n/* Selects elements that have class \"alert\" AND class \"success\" */\n.alert.success {\n  color: green;\n  font-size: larger;\n}\n\n/* And can combine with group selector */\n/* applies to <p class=\"highlighted\"> and <li class=\"selected\"> */\np.highlighted, li.marked {\n  background-color: yellow;\n}\n```\n\n\n\n### 后代选择器\n\n在父选择器后加空格。所有直接和间接的后代都生效。\n\n```html\n<header>\n   <h1>Welcome to the page</h1>\n   <p>I am a special paragraph</p>\n</header>\n<section>\n   <p>some other paragraph</p>\n</section>\n```\n\n```css\n/*\n  Selects p elements that exist within header elements\n  Other p elements will not be affected\n */\nheader p {\n    /* ... */\n}\n```\n\n​\t如果嵌套大于3层时，建议改用.class选择器。\n\n### 子类选择器\n\n只会选择直系的子元素。\n\n```css\n/* Selects paragraph \"Body content\" (immediate child of body),\n   not paragraph \"Section content\" (immediate child of section) */\nbody > p {\n  color: blue;\n}\n```\n\n\n\n### 伪类选择器\n\n在基本选择器后加 `:` 。\n\n```css\n/* style for unvisited links */\na:link { /*...*/ }\n\n/* style for visited links */\na:visited { /*...*/ }\n\n/* style for links the user is hovering over with the mouse */\na:hover { /*...*/ }\n\n/* style for links that have keyboard focus */\na:focus { /*...*/ }\n\n/* style for links as they are being 'activated' (clicked) */\na:active { /*...*/ }\n```\n\n记住：\n\n`a:hover` 必须跟在 `a:link` 之后；\n\n`a:visited` 和 `a:active`必须跟在 `a:hover` 之后；\n\n为了支持只用键盘的人，请同时使用  `a:hover` 和 `a:focus`\n\n> Note that there are [many additional pseudo-classes](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes), including ones that consider specific element attributes (e.g., if a checkbox is `:checked`) or where an element is located within its parent (e.g., if it is the `:first` or `:last-child`, which can be useful for styling lists).\n\n#### nth-* 选择器\n\n`nth-child`  and `nth-of-type`\n\n区别：\n\n```css\n/* 只选中第二个p元素 */\np:nth-of-type(2) {\n    color:red;\n}\n\n/* 只选中第二个元素，但如果第二个元素不是p，那么就不会生效 */\np:nth-child(2) {\n    color:red;\n}\n```\n\n[这里](https://css-tricks.com/the-difference-between-nth-child-and-nth-of-type/)建议使用 `nth-child()` 的时候结合后代选择器使用，而不要说明具体对应的类：\n\n```css\ndl :nth-child(2) {  } /* is better than */\ndd:nth-child(2) {  } /* this */\n```\n\n\n\n>  don’t forget about the awesome cousins `:first-of-type`, `:last-of-type`, `:nth-last-of-type` and `:only-of-type`. [Learn more here.](https://css-tricks.com/pseudo-class-selectors/)\n\n\n\nThe `nth-*` selectors also support the keywords `odd` and `even`, which is really useful for styling tables:\n\n```css\n/* Give every-other row a light-gray background */\ntr:nth-of-type(even) {\n  background-color:#eee;\n}\n```\n\n### 属性选择器\n\n最经常用来给表格进行美化。\n\n```css\n/* select <input type=\"checkbox\"> that have the \"checked\" state */\ninput[type=checkbox]:checked {\n    color: green;\n}\n```\n\nIt is also possible to select attributes that only “partially” match a particular value; see the documentation for details.\n\n\n\n## 三、属性值\n\n### 单位&大小\n\n字体尽量使用相对单位，布局参数可能为绝对单位，但相对单位是最好的：\n\n| Unit       | Meaning                                                      |\n| ---------- | ------------------------------------------------------------ |\n| `em`       | Relative to the **current** element’s font-size. Although originally a [typographic measurement](http://en.wikipedia.org/wiki/Em_(typography)), this unit will **not** change based on `font-family`. |\n| `%`        | Relative to the **parent** element’s font-size *or* dimension. For font-size, use `em` instead (e.g., `1.5em` is `150%` the parent font-size). |\n| `rem`      | Relative to the **root** element’s font-size (i.e., the `font-size` of the root `html` or `body` element). This will often be more consistent than `em`. |\n| `vw`, `vh` | Relative to the **viewport** (e.g., the browser window). Represents 1% of the viewport width and height, respectively. This unit is not supported [by older browsers](http://caniuse.com/#search=vw). |\n\n一般默认的em是16px，即 `1em` 和 `1rem` 等于 `16px`。\n\n### 颜色\n\n有141种内置的颜色，见[predefined color names](http://www.w3schools.com/cssref/css_colornames.asp)。\n\n```css\np {\n   color: mediumpurple;\n}\n\np {\n   color: rgb(147, 112, 219); /* medium purple */\n}\n\np {\n   background-color: rgba(0,0,0,0.5); /* semi-transparent black */\n}\n\np {\n   color: #9370db; /* medium purple */\n}\n```\n\n- 历史趣闻：The list of CSS color names also has a [fascinating history](http://arstechnica.com/information-technology/2015/10/tomato-versus-ff6347-the-tragicomic-history-of-css-color-names/).\n\n### 字体&图标\n\n```css\np {\n    font-family: 'Helvetica Nue', 'Helvetica', 'Arial', sans-serif;\n}\n```\n\n使用font-family属性指定字体，注意最后一个字体必须为通用字体，These are a list of “categories” that the browser can draw upon even if the computer doesn’t have any common fonts available. In pracice, the most common generic families used are `serif` (fonts with [serifs](https://en.wikipedia.org/wiki/Serif), e.g., “Times”), `sans-serif` (fonts *without* serifs, e.g., “Arial”), and `monospace` (fonts with [equal width characters](https://en.wikipedia.org/wiki/Monospaced_font), e.g., “Courier”).\n\n你也可以在自己的网页上包含特殊的字体，以防客户没有这种字体。比如，使用 Google fonts:\n\n```html\n<head>\n    <!-- ... -->\n\n    <!-- load stylesheet with font first so it is available -->\n    <link href=\"https://fonts.googleapis.com/css?family=Encode+Sans\" rel=\"stylesheet\">\n\n    <!-- load stylesheet next -->\n    <link href=\"css/style.css\" rel=\"stylesheet\">\n</head>\n```\n\n```css\nbody {\n    font-family: 'Encode Sans', sans-serif; /* can now use Encode Sans */\n}\n```\n\n**注意：**如果你希望在使用Google Fonts的同时使用Bold，Italic等类型，你需要在引用里额外说明，否则不会生效：\n\n```html\n<!-- includes normal (400) and bold (700) weights -->\n<link href=\"https://fonts.googleapis.com/css?family=Encode+Sans:400,700\" rel=\"stylesheet\">\n```\n\n\n\n你也可以用类似的方法引入图标，比如font awesome：\n\n```html\n<link href=\"https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css\" rel=\"stylesheet\">\n```\n\n> This will load the stylesheet from a [Content Delivery Network (CDN)](https://en.wikipedia.org/wiki/Content_delivery_network), which is a web service intended to quickly serve files commonly used by multiple websites. In particular, browsers will *cache* (save) copies of these files locally, so that when you visit a different website (or the same website for a second time), the file will already be downloaded. We will load most of the CSS and JavaScript frameworks used in this class from a CDN.\n\n使用font awesome：\n\n```html\n<i class=\"fa fa-universal-access\" aria-hidden=\"true\"></i>\n```\n\n**记得加上 `aria-hidden=\"true\"` 来增加Accessibility，使屏幕阅读器不会读出这些图标奇怪的名字！**\n\n\n\n### 背景&图片\n\n插入背景图片：\n\n```css\nheader {\n    background-image: url('../img/page-banner.png');\n}\n```\n\n关于背景，有一堆属性：\n\n```css\nheader {\n    background-image: url('../img/page-banner.png');\n    background-position: center top; /* align to center top */\n    background-size: cover; /* stretch so element is filled; preserves ratio (img may be cropped) */\n    background-repeat: no-repeat; /* don't repeat */\n    background-attachment: fixed; /* stay still when window scrolls */\n    background-color: beige; /* can still have this for anything the image doesn't cover\n                                (or for transparent images) */\n}\n```\n\n简写：\n\n```css\nheader {\n    background: url('../img/page-banner.png') top center / cover no-repeat fixed beige;\n}\n```\n\n- The `background-position` and `background-size` are separated by a `/` since they both can have more than one value.\n\n- You can include some or all of the available background properties in the shorthand. Unlike most shorthand properties, the `background` properties can go in any order (though the above is recommended).\n\n注意，简写会用它所包含的属性覆写掉之前定义过的对应属性。\n\n`background` 属性也支持使用逗号隔开的多层背景（[multiple backgrounds](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Background_and_Borders/Using_CSS_multiple_backgrounds)），你可以利用这个特点来重叠透明背景，就像Photoshop那样。\n\n\n\n## 四、布局\n\n以左上角为原点，元素依次排列。遵循下列三个概念：\n\n- Display：确定元素怎样共享水平空间\n- Position：调整元素的位置\n- Box-model：决定元素占据的2维空间，以及元素之间的间隔空间\n\n### Display\n\n- 行内元素\n- 块元素\n\n可以使用 `display` 属性控制元素成为行内元素还是块元素：\n\n```css\n.inlined {\n  display: inline;\n}\n```\n\n```html\n<!-- this will produce the same result as using <span> elements -->\n<div class=\"inlined\">Inline element</div>\n<div class=\"inlined\">Other inline element</div>\n```\n\n\n\n如果你想将某个元素从页面中移除：\n\n```css\n.hidden {\n    display: none;\n}\n```\n\n\n\n你也可以设置 `display: inline-block` ，这个属性让元素表现为行内元素，但允许元素使用 `width` ，`height` 等属性，就像块元素一样。\n\n> This is particularly useful for making things like lists (`<ul>`) appear “inline”.\n\n\n\n### 盒子模型\n\n所有元素都像是被装在一个盒子里一样，这个盒子包括4个部分：\n\n- 内容\n- padding\n- border\n- margin\n\n你也可以单独设置 `height` 和 `width` 属性，但是建议只设置其中一个，以免设置不当使内容被裁剪（由 `overflow` 属性控制）。你也可以设置 `min-width` ，`min-height`，`max-width`，`max-height` 属性来指定最大最小值。\n\n#### Padding\n\npadding是内容和border之间的间距。\n\n```css\n/* specify each side individually */\ndiv {\n  padding-top: 1em;\n  padding-bottom: 1em;\n  padding-left: 2em;\n  padding-right: 0; /* no units needed on 0 */\n}\n\n/* specify one value for all sides at once */\ndiv {\n  padding: 1.5em;\n}\n\n/* specify one value for top/bottom (first)\n   and one for left/right (second) */\ndiv {\n  padding: 1em 2em;\n}\n```\n\n\n\n#### Border\n\n边框有许多属性，比如 width、color、radius、style等等。\n\n```css\n.boxed {\n   border: 2px dashed black; /* border on all sides */\n}\n\n.underlined {\n   border-bottom: 1px solid red; /* border one side */\n}\n\n.something { /* control border properties separately */\n   border-top-width: 4px;\n   border-top-color: blue;\n   border-top-style: dotted;\n   border-radius: 4px; /* rounded corners! */\n}\n```\n\n\n\n#### Margin\n\nMargin决定了当前盒子和旁边其他盒子之间的间距，定义margin的方式和padding非常相似。\n\n**注意：** 相近元素的Margin通常会互相 [collapse](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Box_Model/Mastering_margin_collapsing) (overlap)，比如上方元素的 `margin-bottom` 会和下方元素的 `margin-top` 重叠，取二者之间更大的那个作为它们之间的间距。\n\n\n\n#### 盒子大小\n\n你盒子的大小应该为：\n\nwidth + padding + border = actual visible/rendered width of an element’s box\n\nheight + padding + border = actual visible/rendered height of an element’s box\n\n例：\n\n```css\n.my-box {\n    width: 100px;\n    padding: 10px; /* includes both left and right */\n}\n```\n\n上述盒子的宽度为120px。\n\n当使用响应式设计的时候，这种计算方法非常不方便，我们可以设置 `box-sizing` 属性为 `border-bpx` 来 “Reset” 所有元素，使得 `width` 属性包括 padding 和 border。\n\n```css\nhtml {\n  box-sizing: border-box;\n}\n*, *:before, *:after {\n  box-sizing: inherit;\n}\n```\n\n见：https://css-tricks.com/box-sizing/\n\n\n\n### Position\n\ndisplay只能改变盒子的形状，要改变盒子的位置，使用position属性。\n\nposition有4个数值：\n\n- `static` ：默认数值，就是默认的布局。此时，`top`、`bottom` 、`left` 和 `right` 属性不起作用。\n- `relative` : 你可以使用`top`、`bottom` 、`left` 和 `right` 这些属性指定元素对于其页面中的自然位置的位移。\n- `fixed` ：使元素不随滚动条移动而始终保持在相对浏览器视窗中的某个位置。用`top`、`bottom` 、`left` 和 `right` 设置。\n- `absolute` ：设定元素对于其首个非 `static` 的父元素的相对位移。**注意：**要使用 `absolute` 属性，最好要把父元素设置为 `position: relative`。See [this post](https://css-tricks.com/absolute-positioning-inside-relative-positioning/) for more information.\n\n\n\nIn order to specify the location for a **`fixed`** element, use the `top`, `left`, `bottom`, and/or `right` properties to specify distance from the appropriate edge of the browser window:\n\n```css\n/* make the <nav> element fixed at the top of the browser window */\nnav {\n    position: fixed;\n    top: 0;  /* 0px from the top */\n    left: 0; /* 0px from the left */\n    width: 100%; /* same as parent, useful for spanning the page */\n}\n```\n\n### Floating\n\n你也可以使用float来移动元素的位置。float的元素会安于屏幕的一隅，而其他内容会将其wrap起来。\n\n如果你不想要其他内容wrap在float元素的周围，可以使用 `clear` 属性：\n\n```css\n.clear-float {\n    clear: both; /* do not allow floating elements on either side */\n}\n```\n\n\n\n**注意：**如果你只是想让某个元素安于页面一隅，你可以使用float。但更复杂的布局（比如多栏目结构）则需要更好的方法来实现。\n\n\n\n### Flexbox\n\n> Flexbox is a new standard that is now supported by [most modern browsers](http://caniuse.com/#feat=flexbox); it has a buggy implementation in Microsoft IE, but is supported in the standards-compliant Edge. For older browsers, you can instead rely on a grid system from one of the popular CSS Frameworks such as Bootstrap.\n\n\n\n> Despite it’s capabilities, Flexbox still is designed primarily for one-directional flows (e.g., having one row of columns). To handle true grid-like layouts, browsers are adopting *another* emerging standard called [**Grid**](https://css-tricks.com/snippets/css/complete-guide-grid/). The Grid framework shares some conceptual similarities to Flexbox (configuring child elements inside of a parent container), but utilizes a different set of properties. Learning one should make it easy to pick up the other. Note that the grid framework is [less well supported](http://caniuse.com/#search=CSS grid) than even Flexbox (it is not supported by IE, Edge, or common older Android devices), so should be used with caution.\n\n\n\n要使用flexbox，你需要一个容器元素来装载子元素：\n\n```html\n<div class=\"flex-container\"> <!-- Parent -->\n  <div class=\"flex-item\">Child 1</div>\n  <div class=\"flex-item\">Child 2</div>\n  <div class=\"flex-item\">Child 3</div>\n</div>\n```\n\n把容器元素设置为：\n\n```css\n.flex-container { /* my flexbox container class */\n    display: flex;\n}\n```\n\nflexbox默认是水平排列的，你可以修改容器元素的 `flex-direction` 属性来调整。见：[flex-direction](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#article-header-id-3)\n\n除了 `height` 和 `width` 以外，flexbox有更加灵活的方式来设置这些属性：\n\n所有flexbox容器的直接子元素都可以使用相关的属性来改变它们在flexbox容器中的排列方式，下面是三个主要的属性：\n\n```css\n* { box-sizing: border-box; } /* recommended for item sizing */\n\n.flex-item {\n    flex-grow: 1; /* get 1 share of extra space */\n    flex-shrink: 0; /* do not shrink if items overflow container */\n    flex-basis: 33%; /* take up 33% of parent initially */\n}\n```\n\n- [**`flex-grow`**](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#article-header-id-10) 指定了额外的空间如何在子元素之间分配。\n\n  > That is, if the container is `500px` wide, but the items’ only takes up `400px` of space, this property determines how much of the remaining `100px` is given to the item.\n\n  > The value is a unitless number (e.g., `1` or `2`, defaulting to `0`), and the amount of remaining space is divided up *proportionally* among the items with a `flex-grow`. So an item with `flex-grow:2` will get twice as much of the remaining space as an item with `flex-grow:1`. If there are 4 items and `100px` of space remaining, giving each item `flex-grow:1` will cause each item to get `25px` (100/4) of the extra space. If one of the items has `flex-grow:2`, then it will get `40px` (21+1+1+2=25=40%21+1+1+2=25=40%) of the extra space, while the other three will only get `20px`.\n\n  可以使用 `flex-grow:1` 让所有子元素在容器中均匀分布。.\n\n- [**`flex-shrink`**](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#article-header-id-11) works similar to `flex-grow`, but in reverse. It takes as a value a number (default to `1`), which determine what “share” or ratio it should shrink by in order to accommodate any overflow space. If the specified dimensions of the items exceeds the dimensions of the container (e.g., 4 `100px` items in a `300px` container would have `100px` of “overflow”), the `flex-shrink` factor indicates how much size needs to be “taken off” the item. A higher number indicates a greater amount of shrinkage.\n\n  In practice, you will often leave this property at default (by not specifying it), *except* when you want to make sure that an item does NOT shrink by giving it `flex-shrink:0`.\n\n- [**`flex-basis`**](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#article-header-id-12) allows you to specify the “initial” dimensions of a particular item. This is similar in concept to the `width` property, except that `flex-basis` is more [flexible](https://stackoverflow.com/questions/34352140/what-are-the-differences-between-flex-basis-and-width) (e.g., if you change the `flex-direction` you don’t also have to change from `width` to `height`). Note that this value can be an dimensional measurement (absolute units like `100px`, or a relative unit like `25%`).\n\n\n\n你也可以使用简写：`flex` 来指定上述3个属性：\n\n> give the `flex-grow`, `flex-shrink`, and `flex-basis` values separated by spaces (the second two being optional if you want to use the default values). Note that if unspecified, the `flex-basis` property will be set to `0`, rather than the `auto` value it has if unspecified.\n\n\n\n除此之外，容器中还可以使用这些元素来进行布局：\n\n> The Flexbox framework also provides a number of additional properties that you can specify on the **container** to customize how items of different sizes are organized on the screen:\n>\n> - [`justify-content`](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#article-header-id-6) specifies how the items should be spread out across the container. Note that items that have `flex-grow:1` will use up the extra space, making this less relevant.\n> - [`align-items`](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#article-header-id-7) is used to specify “cross-axis” alignment (e.g., the vertical alignment of items for a horizontal row).\n> - [`flex-wrap`](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#article-header-id-4) is used to have items “wrap around” to the next line when they overflow the container *instead of* shrinking to fit. You can then use the [`align-content`](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#article-header-id-8) property to specify how these “rows” should be aligned within the container.\n>\n> While it may seem like a lot of options, Flexbox layouts will allow you to easily create layouts (such as multi-column pages) that are otherwise very difficult with the regular box model. Moreover, these layouts will be flexible, and can easily be made **responsive** for different devices and screen sizes.\n\n\n\n## 五、响应式设计\n\n### 移动设备优先\n\n为了进行更好的适配，我们优先适配屏幕受限最大的移动式设备。之后，我们可以通过“who comes last wins”的CSS规则对更大屏幕的设备进行适配，并在移动式设备的基础上增加更多效果。\n\n原则：\n\n- Layout：移动设备的页面布局应采用上下堆叠式布局，追求只需在垂直轴上下移动浏览。position属性为`fixed` 的元素应该尽可能少，以节省被占据的空间。\n- Media：小尺寸屏幕需要的图片不需要太高的分辨率，同时，降低分辨率或者压缩媒体文件也可以节省加载时间。（大屏幕的设备带宽一般更足，所以可以使用高分辨率的媒体文件）\n- Font：使用**相对字体单位**来适配移动设备。\n- Navigation：太大的Navigation可能会因为wrapping到多行。建议使用小tab bar，或者菜单图标或者使其collapse来减少空间。\n- 输入和互动：可点击和互动的元素要足够大。不要使用拥挤在一块的小图标和非常短的超链接。\n- 内容：对于移动端和网页端用户，使用不同的方式表示同样的内容：比如在移动端显示一个巨大的电话图标，而在网页端直接显示电话号码。\n\n### 指定Viewport\n\n有的时候移动端浏览器会自动缩放网页内容来进行适配，但这有时候会导致内容太小，用户不得不再次手动放大。\n\n说明viewport的size和scale可以避免这种问题。在html里面使用下列 `<meta>` 标签：\n\n```html\n<head>\n  <meta charset=\"utf-8\"> <!-- always need this -->\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n\n  <!-- more head elements, including <link> ... -->\n</head>\n```\n\n一般我们指定3个属性：\n\n- `width` ：指明设备的屏幕宽度（viewport）\n- `initial-scale` ：初始页面的缩放值，一般为1，即不缩放\n- `shrink-to-fit`：告诉浏览器不要缩放内容来进行适配\n\n更多详见：[Viewport](https://developer.mozilla.org/en-US/docs/Glossary/Viewport)\n\n### Media Queries\n\n使用媒体查询来构建响应式设计。\n\n媒体查询有点类似 `if` 语句。\n\n```css\n/* A normal CSS rule, will apply to all screen sizes */\nbody {\n    font-size: 14px;\n}\n\n/* A Media Query */\n@media (min-width: 768px)\n{\n    /* these rules apply ONLY on screens 768px and wider */\n\n    /* a normal CSS rule */\n    body {\n        font-size: 18px;\n        background-color: beige;\n    }\n    /* another CSS rule */\n    .mobile-call-icon {\n        display: none; /* don't show on large displays */\n    }\n}\n```\n\n格式就是 `@media ( expression ) { }` ，其中expression表示条件，`min-width: 768px` 表示viewport的width大于等于768px时生效，`max-width` 类似。\n\n如果要使用与或非逻辑：\n\n- `and` 和 `not` 表示与和非\n- 用逗号隔开的规则表示或\n\n```css\n/* style rules for screens between 768px and 992px */\n@media (min-width: 768px) and (max-width: 992px) { }\n\n/* style rules for screens larger than 700px OR in landscape orientation */\n@media (min-width: 700px), (orientation: landscape) { }\n```\n\n\n\n采用 Mobile First 的设计理念，我们把适配移动设备的规则放在最上方，然后在媒体查询里写针对大屏设备的规则来覆盖它们：\n\n```css\n/* on small mobile devices, the header has a purple background */\nheader {\n    font-size: 1.2rem;\n    background-color: mediumpurple;\n}\n\n/* on 768px OR LARGER displays */\n@media (min-width: 768px) {\n    header {\n        font-size: 1.5rem; /* make the header larger font on larger displays */\n    }\n}\n\n/* on 992px OR LARGER displays */\n@media (min-width: 992px) {\n    header {\n        background-image: url('../img/banner.png') /* use background image */\n    }\n}\n```\n\n#### Flexbox案例\n\n```html\n<div class=\"row\">\n  <div class=\"column\">column ONE content</div>\n  <div class=\"column\">column TWO content</div>\n  <div class=\"column\">column THREE content</div>\n  <div class=\"column\">column FOUR content</div>\n</div>\n```\n\n```css\n/* on devices 768px OR WIDER */\n@media (min-width: 768px)\n{\n    .row { /* row is a flexbox container */\n        display: flex;\n        flex-wrap: wrap; /* wrap extra items to the next \"line\" */\n    }\n\n    .column  { /* column is a flexbox item */\n        flex-basis: 50%; /* columns take up 50% of parent by default */\n        flex-grow: 1;\n    }\n}\n\n@media (min-width: 1200px) {\n    .column {\n        flex-basis: auto; /* columns are automatically sized based on content */\n    }\n}\n```\n\nCodePen演示：[Flexbox响应式设计](https://codepen.io/joelross/pen/YxvBzG)\n\n## 六、CSS Framework\n\n你可以使用现成的CSS框架来构建网页，而省去自己完全从0开始书写CSS的麻烦。\n\n一些框架：\n\n- [**Bootstrap**](http://getbootstrap.com/)\n- [**Foundation**](http://foundation.zurb.com/)\n- [**Material Components for the Web (MCW)**](https://material.io/components/web/)\n- [**normalize.css**](http://necolas.github.io/normalize.css/)：If you choose **not** to use a framework, you should still include `normalize` to make your sites consistent across browsers!\n\n### 使用框架\n\n使用 `<link>` 标签来引入框架。\n\n```html\n<head>\n  <!--... other elements here...-->\n\n  <link rel=\"stylesheet\"\n        href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css\">\n  <link rel=\"stylesheet\" href=\"css/my-style.css\">\n</head>\n```\n\n**注意：**请在你自己的css之前引入框架，这样你自己写的CSS才不会被覆盖。\n\n\n\n你可以使用CDN来引入CSS：\n\n> You can almost always switch between the minimized and non-minimized file just by changing the file name between `file.css` and `file.min.css` (when using a CDN).\n\n或者，直接下载源代码到本地路径，然后通过相对路径引入。\n\n你也可以使用**包管理器** ，比如`npm`来下载CSS框架：\n\n```bash\n# install bootstrap (latest version)\nnpm install bootstrap\n```\n\n> This will install the library’s source code into your project’s `node_modules/` folder. Because you’ve saved the dependency in your `package.json` file, you can use the `.gitignore` file to exclude the `node_modules/` folder from your code repo, having new developers install the required framework via `npm install`. You can also use `npm` to easily upgrade the packages (such as when a new version of Bootstrap comes out.\n\n### Bootstrap\n\n使用Bootstrap框架。\n\n引入：\n\n```html\n<link rel=\"stylesheet\"\n      href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css\"\n      integrity=\"sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65\"\n      crossorigin=\"anonymous\">\n```\n\n> (This `<link>` example has 2 additional (optional) attributes: `integrity` gives a [cryptographic hash](https://en.wikipedia.org/wiki/Cryptographic_hash_function) of the source code so the browser can make sure you didn’t download a malicious file by mistake, and `crossorigin` which says that no credentials are sent to the remote server—see the [AJAX](https://info340.github.io/ajax.html#ajax) chapter for a more detailed discussion).\n\n你可以使用特殊的class名来给html元素引入Bootstrap的CSS效果：\n\n```html\n<button>Plain button</button>\n<button class=\"btn\">Bootstrap button</button>\n<button class=\"btn btn-primary\">Primary colored button</button>\n```\n\n它也支持响应式设计：\n\n| Screen Width | Abbreviation | Approximate Device Size                     |\n| ------------ | ------------ | ------------------------------------------- |\n| < 576px      | (default)    | Extra-small devices (e.g., portrait phones) |\n| ≥ 576px      | `sm`         | Small devices (e.g., landscape phones)      |\n| ≥ 768px      | `md`         | Medium devices (e.g., tablets)              |\n| ≥ 992px      | `lg`         | Large devices (e.g., laptops)               |\n| ≥ 1200px     | `xl`         | Extra-large devices (e.g., desktops)        |\n| ≥ 1400px     | `xxl`        | Extra-large devices (e.g., big desktops)    |\n\n使用方法：\n\n> the `float-md-left` class will cause the element to float **only on medium \\*or larger\\* screens**. Similarly, the `float-lg-left` class would cause the element to float only on *large or larger* screens.\n\n#### The Grid\n\n在Bootstrap里使用Grid来进行布局，`col-#` 表示元素占据此行的某个比例。下例中，Item 1占 6/12，Item 2 占 4/12，剩下的 2/12 被分配给Item 3。\n\n```html\n<div class=\"row\"> <!-- a row of items -->\n    <div class=\"col-6\">Item 1</div>\n    <div class=\"col-4\">Item 2</div>\n    <div class=\"col\">Item 3</div>\n</div>\n```\n\n响应式设计：\n\n```html\n<div class=\"row\">\n    <div class=\"col-sm-6 col-md-3\">Item 1</div>\n    <div class=\"col-sm-6 col-md-3\">Item 2</div>\n    <div class=\"col-sm-6 col-md-3\">Item 3</div>\n    <div class=\"col-sm-6 col-md-3\">Item 4</div>\n</div>\n```\n\n(See a [CodePen](https://codepen.io/drstearns/pen/XaYBXp) of this code in action!)\n\n#### 组件\n\nBootstrap还提供了很多组件，比如 `card` , `modal` , `navbar` 等等。\n\n有一些组件需要用到 Javascript，所以你要引入Bootstrap的JavaScript库：\n\n```html\n<!-- the Bootstrap JavaScript library -->\n<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js\"></script>\n```\n\n然后你可以使用  `data-` 属性 (e.g., `data-thingamabob` or `data-my-attribute`) 来指定JavaScript的作用目标。\n\n```html\n<!-- note that the `id` attribute is set to \"exampleModal\" -->\n<div class=\"modal fade\" id=\"exampleModal\" tabindex=\"-1\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n  <div class=\"modal-dialog\">\n    <div class=\"modal-content\">\n      <div class=\"modal-header\">\n        <h1 class=\"modal-title fs-5\" id=\"exampleModalLabel\">Modal title</h1>\n        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n      </div>\n      <div class=\"modal-body\">\n        ...\n      </div>\n      <div class=\"modal-footer\">\n        <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Close</button>\n        <button type=\"button\" class=\"btn btn-primary\">Save changes</button>\n      </div>\n    </div>\n  </div>\n</div>\n\n<!-- data-toggle must be set to \"modal\" and data-target must be set to\nthe value of the `id` attribute on the element that starts your modal markup -->\n<button type=\"button\" class=\"btn btn-primary\" data-bs-toggle=\"modal\" data-bs-target=\"#exampleModal\">\n  Open the Modal\n</button>\n```\n\n注意上面例子中的modal的id是`exampleModal`，初始的时候是隐藏的，而只有一个button显示。\n\n这个button的 `data-bs-toggle=\"modal\"`，且指定这个Modal为：`data-bs-target=\"#exampleModal\"` 。\n\n这样，点击button的时候就会唤出id为 `exampleModal` 的modal。\n\nTry it out in [CodePen](https://codepen.io/drstearns/pen/dzKqNB).\n\n\n\n**注意：**CSS框架和javascript框架可能不兼容！\n\n> The JavaScript included in these CSS frameworks allows you to easily add interactive features, but **they do not mix well with more advanced JavaScript frameworks like React.** To work with React, you’d need to switch instead to a library such as [react-bootstrap](https://react-bootstrap.github.io/), which uses the Bootstrap CSS stylesheet, but re-implement the JavaScript portions to fit into the React framework.\n\n"}]