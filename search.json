[{"title":"DSP知识整理","url":"/dsp知识整理/","content":"# 一、DSP概述\n### 硬件：\n- 高速控制和信号处理\n- 采用流水线操作\n- 采用哈佛结构，数据存储区和程序存储区分离，数据总线和程序总线也是分开的\n- 大多配有硬件乘法器和加法器，同一时钟周期内可以完成累加和累乘\n- 零开销循环\n\n### 软件：\n- 显示MAC（乘加器）指令\n- 精简指令集\n- 专门的寻址方式\n\n### DSP分类\n按数据格式分：\n- 定点\n- 浮点\n\n按用途分：\n- 通用\n- 专用\n\n### DSP的应用\n1. 数字电机控制\n2. 数字电源供应\n3. 高级传感器\n4. ...\n\n\n# 二、TMS320F2812\n\n### C2000系列DSP\n1. Piccolo系列\n   - F2802x, F2803x/5x, F2806x\n2. Delfino系列\n   - F2833x/23x, C2834x, F2837xS, F2837xD \n\n### CPU\n\n- 32位定点CPU\n- 150MHz\n- 当频率为135MHz时，核心电压1.8V；当频率为150MHz时，核心电压为1.9V；输出IO口电压为3.3V\n\n### 内存\n\n- 18kW RAM\n- 128kW Flash\n\n### 总线\n\n- 3条地址总线\n  - PAB：程序地址总线，**22位**\n  - DRAB：数据读地址总线，32位\n  - DWAB：数据写地址总线，32位\n- 3条数据总线\n  - DRDB：数据读数据总线，32位\n  - DWDB：数据写数据总线，32位\n  - PRDB：程序读数据总线，32位\n\n### 外设功能模块\n- 控制类\n  - IO\n  - 定时器\n  - PWM\n\n- 测量类\n  - 数字：捕获、正交编码\n  - 模拟：ADC\n\n- 通讯类\n  - UART\n  - eCAN\n  - SPI\n  - McBsp\n\n### 其他\n外设中断扩展模块（PIE）\n- 支持45个外部中断\n\n片上存储器\n- 128kW Flash，受到CSM（Code Security Module）保护\n- 1kW的OTP型存储器（一次性可编程ROM），受到CSM的保护；\n- 18kW的SARAM\n  - L0和L1：两个4kW的SARAM, 受到CSM的保护\n  - H0: 8kW\n  - M0和M1：两个1kW的SARAM\n- 56个可编程IO口\n- 时钟和系统控制\n- 3个32位CPU定时器\n- 马达控制外设\n  - 两个事件管理器\n- 12位ADC，16通道\n\n### 寻址方式\n\n1. 直接寻址\n2. 间接寻址\n3. 寄存器寻址\n4. 堆栈寻址\n5. 数据/地址/IO空间立即寻址方式\n6. 程序空间间接寻址方式\n\n### C28x流水线\n- 八级流水线，五个阶段\n- 取指令，译码，读取数据，执行，写回\n\n# 三、时钟和系统控制\n![OSC&PLL](../img/DSP/OSC&PLL.png)\n时钟CLKIN的来源有两种，一种是外部晶振提供，另一种是外部时钟输入。可以通过引脚<span style=\"text-decoration: overline\">XF_PLLDIS</span>来控制选择。\n\n- 晶振：20MHz ~ 35MHz\n- 外部时钟：有PLL: 5 ~ 100MHz；无PLL: 4 ~ 150MHz\n\n在使用对应的外设之前，需要使能它们的时钟。与外设时钟使能相关的寄存器是<u>外设时钟使能寄存器PCLKCR</u>。\n\nSYSCLK经过分频可以得到低速外设时钟LSPCLK和高速外设时钟HSPCLK，它们互相独立，分别给高速外设和低速外设供应时钟信号。\n\n<img src=\"..\\img\\DSP\\HSPCLK_LSPCLK.png\" style=\"zoom:75%;\" />\n\n\n\n### 看门狗电路\n\n当八位的<u>看门狗加法计数器WDCNTR</u>达到最大值时，看门狗模块输出一个512个周期的脉冲，使系统复位。\n\n如果不想使用看门狗，可以直接禁止看门狗。\n\n如果启用了看门狗，当程序正常运行时，我们需要定期向WDCNTR依次顺序写入0x55和0xAA来清零，实现“喂狗”操作。\n\n逻辑校验位是看门狗的另一个安全机制，访问<u>看门狗控制器WDCR</u>的写操作中，相应的校验位必须为“101”，否则会立即拒绝访问并引发系统复位。\n\n### 低功耗模式\n- 空闲模式：CPU进入低功耗模式，部分外设不使用时时钟选择性关闭，会自动降低频率来降低功耗，任何使能的外设中断都可以唤醒此模式。\n- 暂停模式：片上所有设备停止工作\n- 备用模式：关闭CPU和外设时钟，OSC和PLL正常工作\n\n# 四、CPU定时器\nx2812内部有3个32位的CPU定时器，其中只有Timer0可供用户使用，Timer1和Timer2都被系统保留。\n\n欲使用CPU定时器来计时，需要设置两个寄存器：\n\n- 周期寄存器 PRDH:PRD\n- 分频器寄存器 TDDRH:TDDR\n\n计数器的周期有以下两个公式：\n\n${TIMCLK = \\frac{TDDRH:TDDR + 1 }{SYSCLK} * 10^{-6}}$\n\n${Period = (PRDH:PRD + 1) * TIMCLK}$\n\n# 五、编程\n\n## 程序文件\n\n- 源程序文件：C，汇编文件\n- 头文件：.h文件\n- 命令文件(cmd)：对程序和数据存储空间进行分配\n- 运行支持库\n\n## 命令文件\n\n伪指令：\n\n- MEMORY：用来指示存储空间\n  - PAGE0：程序空间\n  - PAGE1：数据空间\n- SECTION：用来分配到储存空间\n  - 段：\n    - .cinit：存放用来对全局和静态变量初始化的函数\n    - .text：存放编译C语言时产生的汇编代码\n    - .econst：包含字符串常量、全局变量和静态变量的初始化和说明\n    - .ebss：使用大寄存器模式时为全局变量和静态变量所预留的空间\n    - .stack：为系统堆栈保留的空间，主要用于函数传递变量和为局部变量分配空间。\n\n# 六、GPIO\n\n总共56个可编程复用IO口，分为ABDEFG六组。复位默认为输入口。可提供4mA输入电流。\n\n寄存器：\n\n- GPxMUX\n  - 写0，设置为数字IO口\n  - 写1，功能复用\n- GPxDIR\n  - 写0，输入\n  - 写1，输出\n- GPxDAT\n  - 写0，拉低输出\n  - 写1，拉高输出\n  - 存在一定的问题，建议使用下面三个寄存器来操作\n- GPxSet：只能写1\n- GPxClear：只能写1\n- GPxTOGGLE：只能写1\n\n```c\n// 置位输出\nGpioDataReg.GPASET.bit.GPIOA0 = 1;\n// 读取输入\nif(GpioDataReg.GPASET.bit.GPIOA2 = 0) {\n    ...\n}\n```\n\n \n\n# 七、中断\n\n中断的类型：\n\n- 触发形式\n  - 软件中断\n  - 硬件中断\n    - 内部中断\n    - 外部中断\n- 能否屏蔽\n  - 可屏蔽中断\n  - 不可屏蔽中断\n\n## 中断优先级\n\n在不同组内INT1最大，在PIE同组内，INTx.1最大。\n\n## CPU级中断\n\nCPU中的中断由IER和INTM控制。IER控制每个可屏蔽中断，INTM相当于总闸。\n\n## PIE中断\n\n外设中断扩展模块（PIE），对各种中断请求源进行处理。\n\nPIE一共支持96个中断，这些中断被分为了12个组，每组由8个中断。每个组都被反馈到 <span style=\"text-decoration:overline\" >INT1</span> ~ <span style=\"text-decoration:overline\" >INT12</span> 这12条中断线上的某一条。\n\n## PIE中断向量表\n\nDSP中各个中断服务子程序的地址储存在一片连续的RAM（大小为256x16）内，这就是中断向量表。\n\n## 2812的三级中断系统\n\n三级系统都要允许，某中断才会发生。\n\n- 外设级\n\n  - 当外设中断标志位被置1，且该外设中断为使能状态，此时外设向PIE发出中断请求；\n  - <span style=\"color:red; font-weight:bold\">外设中断标志位置位后必须<u>手动清除</u>！！！</span>\n\n  ```c\n  CpuTimer0Reg.TCR.bit.TIF = 1;\t// 写1来手动清除外设寄存器中的标志位\n  ```\n\n  \n\n- PIE级\n\n  - 除了中断标志寄存器和中断使能寄存器，还有中断应答寄存器。\n  - 同组内的中断在响应时，如果发生了其他同组中断，若中断应答寄存器没有被手动清零，后发生的中断不会被响应。<span style=\"color:red; font-weight:bold\">中断应答寄存器需要手动清除</span>。PIE级中断的标志位不需要手动清除。\n\n  ```c\n  PieCtrl.PIEACK.bit.ACK1 = 1;\n  ```\n\n  \n\n- CPU级\n\n  - 当外设中断请求发送到CPU时，CPU的中断标志寄存器IFR对应位置位。这时，CPU检查IER对应的位是否置位，以及INTM是否<span style=\"color:red; font-weight:bold\">为0</span>。\n\n<img src=\"..\\img\\DSP\\INTERRUPTION.png\" style=\"zoom:75%;\" />\n\n## 中断函数的编写\n\n1. 使能某个中断：\n\n```c\nvoid InitXXX(void) {\n    ...\n    CpuTimer0Regs.TCR.bit.TIE = 1;\t// 使能定时器0的周期中断\n    ...\n}\n```\n\n2. 在主函数里：\n\n```c\nvoid main(void) {\n    InitXXX();\n    DINT;\n    IER = 0x0000;\n    IFR = 0x0000;\n    InitPieCtrl();\n    InitPieVectTable():\n    // 使能PIE的中断\n    PieCtrl.PIEIER1.bit.INTx7 = 1;\n    IER |= M_INT1;\n    EINT;\n}\n```\n\n3. 在DSP28_DefaultIsr.c文件里配置中断函数\n\n```c\ninterrupt void TINT0_ISR(void) {\n    ...\n    CpuTimer0Regs.TCR.bit.TIF = 1;\n    PieCtrl.PIEACK.bit.ACK1 = 1;\n    EINT;\n}\n```\n\n\n\n"}]